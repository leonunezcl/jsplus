[objetos]
num=46
ele1=document
ele2=window
ele3=String
ele4=Number
ele5=Object
ele6=Function
ele7=RegExp
ele8=Date
ele9=Math
ele10=Array
ele11=Boolean
ele12=Global
ele13=layer
ele14=history
ele15=location
ele16=navigator
ele17=screen
ele18=event
ele19=plugin
ele20=mimeType
ele21=Events
ele22=image
ele23=link
ele24=area
ele25=Anchor
ele26=form
ele27=text
ele28=textarea
ele29=password
ele30=hidden
ele31=select
ele32=button
ele33=reset
ele34=submit
ele35=checkbox
ele36=radio
ele37=fileUpload
ele38=element
ele39=option
ele40=packages
ele41=URL
ele42=ActiveXObject
ele43=clientInformation
ele44=userProfile
ele45=clipboardData
ele46=external

[external]
num=10
ele1=menuArguments#1#Returns the window object where the context menu item was executed.
ele2=AddChannel(sURLToCDF)#2#Presents a dialog box that enables the user to either add the channel specified, or change the channel URL if it is already installed.
ele3=AddDesktopComponent(sURL, sType [, iLeft] [, iTop] [, iWidth] [, iHeight])#2#Adds a Web site or image to the Microsoft Active Desktop.
ele4=AddFavorite(sURL [, sTitle])#2#Prompts the user with a dialog box to add the specified URL to the Favorites list.
ele5=AutoCompleteSaveForm(oForm)#2#Saves the specified form in the AutoComplete data store.
ele6=AutoScan(sUserQuery, sURL [, sTarget])#2#Attempts to connect to a Web server by passing the specified query through completion templates.
ele7=ImportExportFavorites(bImportExport, sImportExportPath)#2#Deprecated. Handles the importing and exporting of Internet Explorer favorites.
ele8=IsSubscribed(sURLToCDF)#2#Retrieves a value indicating whether the client subscribes to the given channel.
ele9=NavigateAndFind(sLocation, sQuery, sTargetFrame)#2#Navigates to the specified URL and selects the specified text.
ele10=ShowBrowserUI(sUI, null)#2#Opens the specified browser dialog box.

[clipboardData]
num=3
ele1=clearData([sDataFormat])#2#	Removes one or more data formats from the clipboard through dataTransfer or clipboardData object.
ele2=getData(sDataFormat)#2#Retrieves the data in the specified format from the clipboard through the dataTransfer or clipboardData objects.
ele3=setData(sDataFormat,sData)#2#Assigns data in a specified format to the dataTransfer or clipboardData object.

[clientInformation]
num=16
ele1=appCodeName#1#Retrieves the code name of the browser.
ele2=appMinorVersion#1#Retrieves the application's minor version value.
ele3=appName#1#Retrieves the name of the browser.
ele4=appVersion#1#Retrieves the platform and version of the browser.
ele5=browserLanguage#1#Retrieves the current browser language.
ele6=cookieEnabled#1#Retrieves whether client-side persistent cookies are enabled in the browser. Persistent cookies are those that are stored on the client-side computer.
ele7=cpuClass#1#Retrieves a string denoting the CPU class.
ele8=onLine#1#Retrieves a value indicating whether the system is in global offline mode.
ele9=platform#1#Retrieves the name of the user's operating system.
ele10=systemLanguage#1#Retrieves the default language used by the operating system.
ele11=userAgent#1#Retrieves a string equivalent to the HTTP user-agent request header.
ele12=userLanguage#1#Retrieves the operating system's natural language setting.
ele13=plugins#5#Retrieves a collection of all embed objects within the document.
ele14=javaEnabled()#2#Returns whether Java is enabled.
ele15=taintEnabled()#2#Returns whether data tainting is enabled.
ele16=userProfile#6#Provides methods that allow a script to request read access to and perform read actions on a user's profile information.

[userProfile]
num=5
ele1=addReadRequest(sAttributeName [, vReserved])#2#Adds an entry to the queue for read requests.
ele2=clearRequest()#2#Clears all requests in the read-requests queue to prepare for new profile-information requests.
ele3=doReadRequest(vUsageCode [, vFriendlyName] [, vDomain] [, vPath] [, vExpiration] [, vReserved])#2#Performs all requests located in the read-requests queue.
ele4=getAttribute(sAttributeName)#2#Returns the value of the named attribute from the userProfile object.
ele5=setAttribute(sName, vValue [, iFlags])#2#Sets the value of the specified attribute.

[ActiveXObject]
num=1
ele1=none#1#there is not methods,properties or events for this object

[URL]
num=8
ele1=hash#1#Specifies the anchor portion of the URL. (ie: "section2").
ele2=host#1#Specifies the host and domain name of a network host. (ie: www.mysite.com).
ele3=hostname#1#Specifies the hostname portion of the URL (ie: www.mysite.com).
ele4=href#1#Specifies the entire URL.
ele5=pathname#1#Specifies the path name of the URL (ie: /good.htm).
ele6=port#1#Specifies the port portion of the URL.
ele7=protocol#1#Specifies the protocol portion of the URL (ie: http:).
ele8=search#1#Specifies the query portion of the URL (ie: ?sort=alpha)

[packages]
num=3
ele1=java#1
ele2=sun#1
ele3=netscape#1

[option]
num=5
ele1=defaultSelected#1#A Boolean specifying whether this option is initially selected.
ele2=index#1#Returns the index of the option within the select.options[] array.
ele3=selected#1#Boolean that specifies whether this option is currently selected.
ele4=text#1#Specifies the text for the option.
ele5=value#1#Specifies the value for the option.

[element]
num=16
ele1=blur()#2#Removes focus from the window in question, sending the window to the background on the user's desktop
ele2=checked#1#Boolean property that reflects the current state of the checkbox, "true" if it's checked, and "false" if not.
ele3=click()#2#Simulates a user clicking on the checkbox.
ele4=defaultChecked#1#Boolean property that reflects the value of the CHECKED attribute.
ele5=focus()#2#Sets focus on the element.
ele6=form#1#References the form that contains the element.
ele7=length#1#Returns the number of frames contained in the window
ele8=name#1#References the form that contains the element.
ele9=onBlur()#3#Code is executed when the focus is removed from the element.
ele10=onChange()#3#Code is executed when the user changes the value within the text field, and removes focus away from the field
ele11=onClick()#3#Code is executed when user clicks on the element.
ele12=options[]#5#An array of Options objects, for each option within the selection list.
ele13=selected()#2#Boolean that specifies whether this option is currently selected.
ele14=selectedIndex#1#An integer reflecting the index of the selected option. If non is selected, -1 is returned. If multiple options are selected, it returns the index of the first selected option
ele15=type#1#A property available on all form elements, "type" returns the type of the calling form element
ele16=value#1#A read/write string that specifies the value of the checkbox (the value attribute)

[operadores]
num=6
ele1=arithmetic
ele2=comparison
ele3=assignment
ele4=logical
ele5=bitwise
ele6=others

[arithmetic]
num=7
ele1=+#(Addition) Adds 2 numbers.
ele2=-#(Unary negation, subtraction) As a unary operator, negates the value of its argument. As a binary operator, subtracts 2 numbers.
ele3=*#(Multiplication) Multiplies 2 numbers.
ele4=/#(Division) Divides 2 numbers.
ele5=%#(Modulus) Computes the integer remainder of dividing 2 numbers.
ele6=++#(Increment) Adds one to a variable representing a number (returning either the new or old value of the variable)
ele7=--#(Decrement) Subtracts one from a variable representing a number (returning either the new or old value of the variable)

[comparison]
num=6
ele1===#Returns true if the operands are equal.
ele2====#Tests for equality between two operands both in terms of value and type. Supported in JavaScript 1.3+
ele3=<#Returns true if left operand is less than right operand.
ele4=<=#Returns true if left operand is less than or equal to right operand.
ele5=>#Returns true if left operand is greater than right operand.
ele6=>=#Returns true if left operand is greater than or equal to right operand.

[assignment]
num=12
ele1==#Assigns the value of the second operand to the first operand.
ele2=+=#Adds 2 numbers and assigns the result to the first.
ele3=-=#Subtracts 2 numbers and assigns the result to the first.
ele4=*=#Multiplies 2 numbers and assigns the result to the first.
ele5=/=#Divides 2 numbers and assigns the result to the first.
ele6=%=#Computes the modulus of 2 numbers and assigns the result to the first.
ele7=&=#Performs a bitwise AND and assigns the result to the first operand.
ele8=^=#Performs a bitwise XOR and assigns the result to the first operand.
ele9=|=#Performs a bitwise OR and assigns the result to the first operand.
ele10=<<=#Performs a left shift and assigns the result to the first operand.
ele11=>>=#Performs a sign-propagating right shift and assigns the result to the first operand.
ele12=>>>=#Performs a zero-fill right shift and assigns the result to the first operand.

[logical]
num=3
ele1=&&#(Logical AND) Returns true if both logical operands are true. Otherwise, returns false.
ele2=||#(Logical OR) Returns true if either logical expression is true. If both are false, returns false.
ele3=!#(Logical negation) If its single operand is true, returns false; otherwise, returns true.

[bitwise]
num=6
ele1=&#(Bitwise AND) Returns a one in each bit position if bits of both operands are ones.
ele2=|#(Bitwise OR) Returns a one in a bit if bits of either operand is one.
ele3=^#(Bitwise XOR) Returns a one in a bit position if bits of one but not both operands are one.
ele4=<<#(Left shift) Shifts its first operand in binary representation the number of bits to the left specified in the second operand, shifting in zeros from the right.
ele5=>>#(Sign-propagating right shift) Shifts the first operand in binary representation the number of bits to the right specified in the second operand, discarding bits shifted off.
ele6=>>>#(Zero-fill right shift) Shifts the first operand in binary representation the number of bits to the right specified in the second operand, discarding bits shifted off, and shifting in zeros from the left.
ele7=~#(Bitwise NOT) Flips the bits of its operand.

[others]
num=3
ele1=?:#Lets you perform a simple "if...then...else"
ele2=typeof
ele3=,#Evaluates two expressions and returns the result of the second expression.

[control]
num=11
ele1=if (expression)
ele2=if/else
ele3=switch (exp) { case 1: condition break:
ele4=ret = cond 1 ? exp1 : exp2
ele5=for (begin;condition;increment) {}
ele6=for (var in object) {}
ele7=while (object) {}
ele8=with (object) {}
ele9=do {sentences} while (condition)
ele10=label
ele11=continue [label]
ele12=break [label]

[document]
num=113
ele1=activeElement#1#Retrieves the object that has the focus when the parent document has focus.
ele2=alinkColor#1#Sets or retrieves the color of all active links in the document.
ele3=bgColor#1#Deprecated. Sets or retrieves a value that indicates the background color behind the object.
ele4=charset#1#Sets or retrieves the character set used to encode the object.
ele5=compatMode#1#Retrieves a value that indicates whether standards-compliant mode is switched on for the object.
ele6=cookie#1#Sets or retrieves the string value of a cookie.
ele7=defaultCharset#1#Retrieves the default character set from the current regional language settings.
ele8=designMode#1#Sets or retrieves a value that indicates whether the document can be edited.
ele9=dir#1#Sets or retrieves a value that indicates the reading order of the object.
ele10=doctype#1#Retrieves the document type declaration associated with the current document.
ele11=documentElement#1#Retrieves a reference to the root node of the document.
ele12=domain#1#Sets or retrieves the security domain of the document.
ele13=expando#1#Sets or retrieves a value indicating whether arbitrary variables can be created within the object.
ele14=fgColor#1#Sets or retrieves the foreground (text) color of the document.
ele15=fileCreatedDate#1#Retrieves the date the file was created.
ele16=fileModifiedDate#1#Retrieves the date the file was last modified.
ele17=fileSize#1#Retrieves the file size.
ele18=implementation#1#Retrieves the implementation object of the current document.
ele19=lastModified#1#Retrieves the date the page was last modified, if the page supplies one.
ele20=linkColor#1#Sets or retrieves the color of the document links.
ele21=parentWindow#1#Retrieves a reference to the container object of the window.
ele22=protocol#1#Sets or retrieves the protocol portion of a URL.
ele23=readyState#1#Retrieves a value that indicates the current state of the object.
ele24=referrer#1#Retrieves the URL of the location that referred the user to the current page.
ele25=uniqueID#1#Retrieves an autogenerated, unique identifier for the object.
ele26=URL#1#Sets or retrieves the URL for the current document.
ele27=URLUnencoded#1#Retrieves the URL for the document, stripped of any character encoding.
ele28=vlinkColor#1#Sets or retrieves the color of the links that the user has visited.
ele29=XMLDocument#1#Retrieves a reference to the Extensible Markup Language (XML)
ele30=XSLDocument#1#Retrieves a reference to the top-level node of the Extensible Stylesheet Language (XSL) document.
ele31=all#5#Returns a reference to the collection of elements contained by the object.
ele32=anchors#5#Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
ele33=applets#5#Retrieves a collection of all applet objects in the document.
ele34=childNodes#5#Retrieves a collection of HTML Elements and TextNode objects that are direct descendants of the specified object.
ele35=embeds#5#Retrieves a collection of all embed objects in the document.
ele36=forms#5#Retrieves a collection, in source order, of all form objects in the document.
ele37=frames#5#Retrieves a collection of all window objects defined by the given document or defined by the document associated with the given window.
ele38=images#5#Retrieves a collection, in source order, of img objects in the document.
ele39=links#5#Retrieves a collection of all a objects that specify the HREF property and all area objects in the document.
ele40=namespaces#5#Retrieves a collection of namespace objects.
ele41=scripts#5#Retrieves a collection of all script objects in the document.
ele42=styleSheets#5#Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
ele43=onactivate#3#Fires when the object is set as the active element.
ele44=onbeforeactivate#3#Fires immediately before the object is set as the active element.
ele45=onbeforecut#3#Fires on the source object before the selection is deleted from the document.
ele46=onbeforedeactivate#3#Fires immediately before the activeElement is changed from the current object to another object in the parent document.
ele47=onbeforeeditfocus#3#Fires before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.
ele48=onbeforepaste#3#Fires on the target object before the selection is pasted from the system clipboard to the document.
ele49=onclick#3#Fires when the user clicks the left mouse button on the object.
ele50=oncontextmenu#3#Fires when the user clicks the right mouse button in the client area, opening the context menu.
ele51=oncontrolselect#3#Fires when the user is about to make a control selection of the object.
ele52=oncut#3#Fires on the source element when the object or selection is removed from the document and added to the system clipboard.
ele53=ondblclick#3#Fires when the user double-clicks the object.
ele54=ondeactivate#3#Fires when the activeElement is changed from the current object to another object in the parent document.
ele55=ondrag#3#Fires on the source object continuously during a drag operation.
ele56=ondragend#3#Fires on the source object when the user releases the mouse at the close of a drag operation.
ele57=ondragenter#3#Fires on the target element when the user drags the object to a valid drop target.
ele58=ondragleave#3#Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
ele59=ondragover#3#Fires on the target element continuously while the user drags the object over a valid drop target.
ele60=ondragstart#3#Fires on the source object when the user starts to drag a text selection or selected object.
ele61=ondrop#3#Fires on the target object when the mouse button is released during a drag-and-drop operation.
ele62=onfocusin#3#Fires for an element just prior to setting focus on that element.
ele63=onfocusout#3#Fires for the current element with focus immediately after moving focus to another element.
ele64=onhelp#3#Fires when the user presses the F1 key while the browser is the active window.
ele65=onkeydown#3#Fires when the user presses a key.
ele66=onkeypress#3#Fires when the user presses an alphanumeric key.
ele67=onkeyup#3#Fires when the user releases a key.
ele68=onmousedown#3#Fires when the user clicks the object with either mouse button.
ele69=onmousemove#3#Fires when the user moves the mouse over the object.
ele70=onmouseout#3#Fires when the user moves the mouse pointer outside the boundaries of the object.
ele71=onmouseover#3#Fires when the user moves the mouse pointer into the object.
ele72=onmouseup#3#Fires when the user releases a mouse button while the mouse is over the object.
ele73=onmousewheel#3#Fires when the wheel button is rotated.
ele74=onmove#3#Fires when the object moves.
ele75=onmoveend#3#Fires when the object stops moving.
ele76=onmovestart#3#Fires when the object starts to move.
ele77=onpaste#3#Fires on the target object when the user pastes data, transferring the data from the system clipboard to the document.
ele78=onpropertychange#3#Fires when a property changes on the object.
ele79=onreadystatechange#3#Fires when the state of the object has changed.
ele80=onresizeend#3#Fires when the user finishes changing the dimensions of the object in a control selection.
ele81=onresizestart#3#Fires when the user begins to change the dimensions of the object in a control selection.
ele82=onselectionchange#3#Fires when the selection state of a document changes.
ele83=onstop#3#Fires when the user clicks the Stop button or leaves the Web page.
ele84=attachEvent(sEvent, fpNotify)#2#Binds the specified function to an event, so that the function gets called whenever the event fires on the object.
ele85=clear()#2#Clears all elements in the document
ele86=close()#2#Closes an output stream and forces the sent data to display.
ele87=createAttribute(sName)#2#Creates an attribute object with a specified name.
ele88=createComment(sData)#2#Creates a comment object with the specified data.
ele89=createDocumentFragment()#2#Creates a new document.
ele90=createElement(sTag)#2#Creates an instance of the element for the specified tag.
ele91=createEventObject([oExistingEvent])#2#Generates an event object for passing event context information when using the fireEvent method.
ele92=createStyleSheet([sURL] [, iIndex])#2#Creates a style sheet for the document.
ele93=createTextNode([sText])#2#Creates a text string from the specified value.
ele94=detachEvent(sEvent,fpNotify)#2#Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.
ele95=elementFromPoint(iX, iY)#2#Returns the element for the specified x and y coordinates.
ele96=execCommand(sCommand [, bUserInterface] [, vValue])#2#Executes a command on the current document, current selection, or the given range.
ele97=focus()#2#Causes the element to receive the focus and executes the code specified by the onfocus event.
ele98=getElementById(sIDValue)#2#Returns a reference to the first object with the specified value of the ID attribute.
ele99=getElementsByName(sNameValue)#2#Retrieves a collection of objects based on the value of the NAME attribute.
ele100=getElementsByTagName(sTagName)#2#Retrieves a collection of objects based on the specified element name.
ele101=hasFocus()#2#Retrieves the value indicating whether the object currently has focus.
ele102=mergeAttributes(oSource [, bPreserve])#2#Copies all read/write attributes to the specified element.
ele103=open(sUrl [, sName] [, sFeatures] [, bReplace])#2#This method works in two ways. It opens a document to collect the output of the write and writeln methods. In this case, only the first two parameters, url and name are used. When values for the additional parameters are specified, this method opens a window in the same way as the window.open method for the window object.
ele104=queryCommandEnabled(sCmdID)#2#Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
ele105=queryCommandIndeterm(sCmdID)#2#Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
ele106=queryCommandState(sCmdID)#2#Returns a Boolean value that indicates the current state of the command.
ele107=queryCommandSupported(sCmdID)#2#Returns a Boolean value that indicates whether the current command is supported on the current range.
ele108=queryCommandValue(sCmdID)#2#Returns the current value of the document, range, or current selection for the given command.
ele109=recalc([bForceAll])#2#Recalculates all dynamic properties in the current document.
ele110=releaseCapture()#2#Removes mouse capture from the object in the current document.
ele111=setActive()#2#Sets the object as active without setting focus to the object.
ele112=write(sText)#2#Writes one or more HTML expressions to a document in the specified window.
ele113=writeln(sText)#2#Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.

[window]
num=77
ele1=closed#1#Retrieves whether the referenced window is closed.
ele2=defaultStatus#1#Sets or retrieves the default message displayed in the status bar at the bottom of the window.
ele3=dialogArguments#1#Retrieves the variable or array of variables passed into the modal dialog window.
ele4=dialogHeight#1#Sets or retrieves the height of the modal dialog window.
ele5=dialogLeft#1#Sets or retrieves the left coordinate of the modal dialog window.
ele6=dialogTop#1#Sets or retrieves the top coordinate of the modal dialog window.
ele7=dialogWidth#1#Sets or retrieves the width of the modal dialog window.
ele8=frameElement#1#Retrieves the frame or iframe object that is hosting the window in the parent document.
ele9=length#1#Sets or retrieves the number of objects in a collection.
ele10=name#1#Sets or retrieves a value that indicates the window name.
ele11=offscreenBuffering#1#Sets or retrieves whether objects are drawn offscreen before being made visible to the user.
ele12=opener#1#Sets or retrieves a reference to the window that created the current window.
ele13=parent#1#Retrieves the parent of the window in the object hierarchy.
ele14=returnValue#1#Sets or retrieves the value returned from the modal dialog window.
ele15=screenLeft#1#Retrieves the x-coordinate of the upper left-hand corner of the browser's client area, relative to the upper left-hand corner of the screen.
ele16=screenTop#1#Retrieves the y-coordinate of the top corner of the browser's client area, relative to the top corner of the screen.
ele17=self#1#Retrieves a reference to the current window or frame.
ele18=status#1#Sets or retrieves the message in the status bar at the bottom of the window.
ele19=top#1#Retrieves the topmost ancestor window.
ele20=frames#5#Retrieves a collection of all window objects defined by the given document or defined by the document associated with the given window.
ele21=onactivate#3#Fires when the object is set as the active element.
ele22=onafterprint#3#Fires on the object immediately after its associated document prints or previews for printing.
ele23=onbeforedeactivate#3#Fires immediately before the activeElement is changed from the current object to another object in the parent document.
ele24=onbeforeprint#3#Fires on the object before its associated document prints or previews for printing.
ele25=onbeforeunload#3#Fires prior to a page being unloaded.
ele26=onblur#3#Fires when the object loses the input focus.
ele27=oncontrolselect#3#Fires when the user is about to make a control selection of the object.
ele28=ondeactivate#3#Fires when the activeElement is changed from the current object to another object in the parent document.
ele29=onerror#3#Fires when an error occurs during object loading.
ele30=onfocus#3#Fires when the object receives focus.
ele31=onhelp#3#Fires when the user presses the F1 key while the browser is the active window.
ele32=onload#3#Fires immediately after the browser loads the object.
ele33=onmove#3#Fires when the object moves.
ele34=onmoveend#3#Fires when the object stops moving.
ele35=onmovestart#3#Fires when the object starts to move.
ele36=onresize#3#Fires when the size of the object is about to change.
ele37=onresizeend#3#Fires when the user finishes changing the dimensions of the object in a control selection.
ele38=onresizestart#3#Fires when the user begins to change the dimensions of the object in a control selection.
ele39=onscroll#3#Fires when the user repositions the scroll box in the scroll bar on the object.
ele40=onunload#3#Fires immediately before the object is unloaded.
ele41=attachEvent(sEvent, fpNotify)#2#Binds the specified function to an event, so that the function gets called whenever the event fires on the object.
ele42=blur()#2#Causes the element to lose focus and fires the onblur event.
ele43=clearInterval(iIntervalID)#2#Cancels the interval previously started using the setInterval method.
ele44=clearTimeout(iTimeoutID)#2#Cancels a time-out that was set with the setTimeout method.
ele45=close()#2#Closes the current browser window or HTML Application (HTA).
ele46=confirm([sMessage])#2#Displays a confirmation dialog box that contains an optional message as well as OK and Cancel buttons.
ele47=createPopup([vArgs])#2#Creates a popup window.
ele48=detachEvent(sEvent, fpNotify)#2#Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.
ele49=execScript(sExpression, sLanguage)#2#Executes the specified script in the provided language.
ele50=focus()#2#Causes the element to receive the focus and executes the code specified by the onfocus event.
ele51=moveBy(iX, iY)#2#Moves the screen position of the window by the specified x and y offset values.
ele52=moveTo(iX, iY)#2#Moves the screen position of the upper-left corner of the window to the specified x and y position.
ele53=navigate(sURL)#2#Loads the specified URL to the current window.
ele54=open( [sURL] [, sName] [, sFeatures] [, bReplace])#2#Opens a new window and loads the document specified by a given URL.
ele55=print()#2#Prints the document associated with the window.
ele56=prompt( [sMessage] [, sDefaultValue])#2#Displays a dialog box that prompts the user with a message and an input field.
ele57=resizeBy(iX, iY)#2#Changes the current size of the window by the specified x- and y-offset.
ele58=resizeTo(iWidth, iHeight)#2#Sets the size of the window to the specified width and height values.
ele59=scroll(iX, iY)#2#Causes the window to scroll to the specified x- and y-offset at the upper-left corner of the window.
ele60=scrollBy(iX, iY)#2#Causes the window to scroll relative to the current scrolled position by the specified x- and y-pixel offset.
ele61=scrollTo(iX, iY)#2#Scrolls the window to the specified x- and y-offset.
ele62=setActive()#2#Sets the object as active without setting focus to the object.
ele63=setInterval(vCode, iMilliSeconds [, sLanguage])#2#Evaluates an expression each time a specified number of milliseconds has elapsed.
ele64=setTimeout(vCode, iMilliSeconds [, sLanguage])#2#Evaluates an expression after a specified number of milliseconds has elapsed.
ele65=showHelp(sURL [, vContextID])#2#Displays a Help file. This method can be used with Microsoft HTML Help.
ele66=showModalDialog(sURL [, vArguments] [, sFeatures])#2#Creates a modal dialog box that displays the specified HTML document.
ele67=showModelessDialog(sURL [, vArguments] [, sFeatures])#2#Creates a modeless dialog box that displays the specified HTML document.
ele68=clientInformation#6#Contains information about the browser.
ele69=clipboardData#6#Provides access to predefined clipboard formats for use in editing operations.
ele70=document#6#Represents the HTML document in a given browser window.
ele71=event#6#Represents the state of an event, such as the element in which the event occurred, the state of the keyboard keys, the location of the mouse, and the state of the mouse buttons.
ele72=external#6#Allows access to an additional object model provided by host applications of the Microsoft Internet Explorer browser components.
ele73=history#6#Contains information about the URLs visited by the client.
ele74=location#6#Contains information about the current URL.
ele75=navigator#6#Contains information about the browser.
ele76=screen#6#Contains information about the client's screen and rendering capabilities.

[history]
num=4
ele1=length#1#Returns the number of URLs in the browser's history list.
ele2=back()#2#Loads the previous URL in the history list.
ele3=forward()#2#Loads the next URL in the history list.
ele4=go(vLocation)#2#Goes to a specific URL within the history list. "whereTo" can be an integer to go to a URL within a specific position relative to the current (ie: -1 goes back one page, 1 goes forward one), or a string. For the string, enter a partial or full URL, and the function to match and go to the first URL that matches the string.

[location]
num=11
ele1=hash#1#Specifies the anchor portion of the URL. (ie: "section2").
ele2=host#1#Specifies the host and domain name of a network host. (ie: www.mysite.com).
ele3=hostname#1#Specifies the hostname portion of the URL (ie: www.mysite.com).
ele4=href#1#Specifies the entire URL.
ele5=pathname#1#Specifies the path name of the URL (ie: /good.htm).
ele6=port#1#Specifies the port portion of the URL.
ele7=protocol#1#Specifies the protocol portion of the URL (ie: http:).
ele8=search#1#Specifies the query portion of the URL (ie: ?sort=alpha)
ele9=assign(sURL)#2#Loads a new HTML document.
ele10=reload([forceGet])#2#Reloads the current document. If "forceGet" set to true, document is completely reloaded even if server reports it hasn't been modified since last reload. Default is false.
ele11=replace(url)#2#Loads the specified URL over the current history entry

[layer]
num=39
ele1=above#1#The layer object above this one in z-order, among all layers in the document or the enclosing window object if this layer is topmost.
ele2=background#1#The image to use as the background for the layer's canvas.
ele3=below#1#The layer object below this one in z-order, among all layers in the document or null if this layer is at the bottom.
ele4=bgColor#1#The color to use as a solid background color for the layer's canvas.
ele5=clip.bottom#1#The bottom edge of the clipping rectangle (the part of the layer that is visible.)
ele6=clip.height#1#The height of the clipping rectangle (the part of the layer that is visible.)
ele7=clip.left#1#The left edge of the clipping rectangle (the part of the layer that is visible.)
ele8=clip.right#1#The right edge of the clipping rectangle (the part of the layer that is visible.)
ele9=clip.top#1#The top edge of the clipping rectangle (the part of the layer that is visible.)
ele10=clip.width#1#The width of the clipping rectangle (the part of the layer that is visible.)
ele11=document#1#The layer's associated document.
ele12=left#1#The horizontal position of the layer's left edge, in pixels, relative to the origin of its parent layer.
ele13=name#1#A string specifying the name assigned to the layer through the ID attribute in the LAYER tag.
ele14=pageX#1#The horizontal position of the layer, in pixels, relative to the page.
ele15=pageY#1#The vertical position of the layer, in pixels, relative to the page.
ele16=parentLayer#1#	The layer object that contains this layer, or the enclosing window object if this layer is not nested in another layer.
ele17=siblingAbove#1#The layer object above this one in z-order, among all layers that share the same parent layer, or null if the layer has no sibling above
ele18=siblingBelow#1#The layer object below this one in z-order, among all layers that share the same parent layer, or null if layer is at the bottom.
ele19=src#1#A string specifying the URL of the layer's content.
ele20=top#1#The vertical position of the layer's top edge, in pixels, relative to the origin of its parent layer.
ele21=visibility#1#Whether or not the layer is visible.
ele22=zIndex#1#The relative z-order of this layer with respect to its siblings.
ele23=load#2#Changes the source of a layer to the contents of the specified file, and simultaneously changes the width at which the layer's HTML contents will be wrapped.
ele24=moveAbove#2#Stacks this layer above the layer specified in the argument, without changing either layer's horizontal or vertical position.
ele25=moveBelow#2#Stacks this layer below the specified layer, without changing either layer's horizontal or vertical position.
ele26=moveBy#2#Changes the layer position by applying the specified deltas, measured in pixels.
ele27=moveTo#2#Moves the top-left corner of the window to the specified screen coordinates.
ele28=moveToAbsolute#2#Changes the layer position to the specified pixel coordinates within the page (instead of the containing layer.)
ele29=resizeBy#2#Resizes the layer by the specified height and width values (in pixels).
ele30=resizeTo#2#Resizes the layer to have the specified height and width values (in pixels).
ele31=onBlur#3#Executes JavaScript code when a blur event occurs; that is, when a form element loses focus or when a window or frame loses focus.
ele32=onFocus#3#Executes JavaScript code when a focus event occurs; that is, when a window, frame, or frameset receives focus or when a form element receives input focus.
ele33=onLoad#3#Executes JavaScript code when a load event occurs; that is, when the browser finishes loading a window or all frames within a FRAMESET tag.
ele34=onMouseOut#3#Executes JavaScript code when a MouseOut event occurs; that is, each time the mouse pointer leaves an area (client-side image map) or link from inside that area or link.
ele35=onMouseOver#3#Executes JavaScript code when a MouseOver event occurs; that is, once each time the mouse pointer moves over an object or area from outside that object or area.
ele36=captureEvents#2#Sets the window or document to capture all events of the specified type.
ele37=handleEvent#2#Invokes the handler for the specified event.
ele38=releaseEvents#2#Sets the layer to release captured events of the specified type, sending the event to objects further along the event hierarchy.
ele39=routeEvent#2#Passes a captured event along the normal event hierarchy.

[navigator]
num=18
ele1=appCodeName#1#Retrieves the code name of the browser.
ele2=appMinorVersion#1#Retrieves the application's minor version value.
ele3=appName#1#Retrieves the name of the browser.
ele4=appVersion#1#Retrieves the platform and version of the browser.
ele5=browserLanguage#1#Retrieves the current browser language.
ele6=cookieEnabled#1#Retrieves whether client-side persistent cookies are enabled in the browser. Persistent cookies are those that are stored on the client-side computer.
ele7=cpuClass#1#Retrieves a string denoting the CPU class.
ele8=onLine#1#Retrieves a value indicating whether the system is in global offline mode.
ele9=platform#1#Retrieves the name of the user's operating system.
ele10=systemLanguage#1#Retrieves the default language used by the operating system.
ele11=userAgent#1#Retrieves a string equivalent to the HTTP user-agent request header.
ele12=userLanguage#1#Retrieves the operating system's natural language setting.
ele13=language#1#Returns the default language of the browser version (ie: en-US). NS4 and NS6+ only.
ele14=userAgent#1#String passed by browser as user-agent header. (ie: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1))
ele15=plugins#5#Retrieves a collection of all embed objects within the document.
ele16=javaEnabled()#2#Returns whether Java is enabled.
ele17=taintEnabled()#2#Returns whether data tainting is enabled.
ele18=userProfile#6#Provides methods that allow a script to request read access to and perform read actions on a user's profile information.

[screen]
num=13
ele1=availHeight#1#Retrieves the height of the working area of the system's screen, excluding the Microsoft Windows taskbar.
ele2=availWidth#1#Retrieves the width of the working area of the system's screen, excluding the Windows taskbar.
ele3=bufferDepth#1#Sets or retrieves the number of bits per pixel used for colors in the off-screen bitmap buffer.
ele4=colorDepth#1#Retrieves the number of bits per pixel used for colors on the destination device or buffer.
ele5=deviceXDPI#1#Retrieves the actual number of horizontal dots per inch (DPI) of the system's screen.
ele6=deviceYDPI#1#Retrieves the actual number of vertical dots per inch (DPI) of the system's screen.
ele7=fontSmoothingEnabled#1#Retrieves whether the user has enabled font smoothing in the Display control panel.
ele8=height#1#Retrieves the vertical resolution of the screen.
ele9=logicalXDPI#1#Retrieves the normal number of horizontal dots per inch (DPI) of the system's screen.
ele10=logicalYDPI#1#Retrieves the normal number of vertical dots per inch (DPI) of the system's screen.
ele11=updateInterval#1#Sets or retrieves the update interval for the screen.
ele12=width#1#Retrieves the horizontal resolution of the screen.
ele13=pixelDepth#1#Display screen color resolution (bits per pixel). NS4/ NS6+ exclusive property.

[String]
num=32
ele1=anchor(name)#2#Returns the string with the tag <A name="name"> surrounding it.
ele2=big()#2#Returns the string with the tag <BIG> surrounding it.
ele3=blink()#2#Returns the string with the tag <BLINK> surrounding it.
ele4=bold()#2#Returns the string with the tag <B> surrounding it.
ele5=charAt(index)#2#Returns the character at the "x" position within the string.
ele6=fixed()#2#Returns the string with the tag <TT> surrounding it.
ele7=fontcolor(color)#2#Returns the string with the tag <FONT color="color"> surrounding it
ele8=fontsize(size)#2#Returns the string with the tag <FONT size="size"> surrounding it.
ele9=fromCharCode(c1, c2,...)#2#Returns a string created by using the specified sequence of Unicode values (arguments c1, c2 etc). Method of String object, not String instance. For example: String.fromCharCode().
ele10=indexOf(substr, [start])#2#Searches and (if found) returns the index number of the searched character or substring within the string. If not found, -1 is returned. "Start" is an optional argument specifying the position within string to begin the search. Default is 0.
ele11=italics()#2#Returns the string with the tag <I> surrounding it.
ele12=lastIndexOf(substr, [start])#2#Searches and (if found) returns the index number of the searched character or substring within the string. Searches the string from end to beginning. If not found, -1 is returned. "Start" is an optional argument specifying the position within string to begin the search. Default is string.length-1.
ele13=link(url)#2#Returns the string with the tag <A href="url"> surrounding it.
ele14=small()#2#Returns the string with the tag <SMALL> surrounding it.
ele15=split([separator], [limit]))#2#Splits a string into many according to the specified delimiter, and returns an array containing each element. The optional "limit" is an integer that lets you specify the maximum number of elements to return.
ele16=strike()#2#Returns the string with the tag <STRIKE> surrounding it.
ele17=substr(start, [length])#2#Returns the characters in a string beginning at "start" and through the specified number of characters, "length". "Length" is optional, and if omitted, up to the end of the string is assumed.
ele18=substring(from, [to])#2#Returns the characters in a string between "from" and "to" indexes, NOT including "to" inself. "To" is optional, and if omitted, up to the end of the string is assumed.
ele19=toLowerCase()#2#Returns the string with all of its characters converted to lowercase.
ele20=toUpperCase()#2#Returns the string with all of its characters converted to uppercase.
ele21=length#1#Returns the length of the string (numbers of characters).
ele22=protoype#1#Use this property to attach additional properties and/or methods that get reflected in all instances of the String.
ele23=charCodeAt([index])#2#Returns the Unicode value of the character at position "x" within the string.
ele24=concat(string2, string3,[stringN])#2#Combines one or more strings (arguments v1, v2 etc) into the existing one and returns the combined string. Original string is not modified
ele25=match(regexp)#2#Executes a search for a match within a string based on a regular expression. It returns an array of information or null if no match is found.
ele26=replace(regexp, replacetext)#2#Searches and replaces the regular expression portion (match) with the replaced text instead.
ele27=search(regexp)#2#Tests for a match in a string. It returns the index of the match, or -1 if not found.
ele28=slice(start, [end])#2#Returns a substring of the string based on the "start" and "end" index arguments, NOT including the "end" index itself. "End" is optional, and if none is specified, the slice includes all characters from "start" to end of string.
ele29=sub()#2#Returns the string with the tag <SUB> surrounding it.
ele30=sup()#2#Returns the string with the tag <SUP> surrounding it.
ele31=toString()#2#Returns a string representing the specified object.
ele32=valueOf()#2#Returns the primitive value of a String object.

[Date]
num=43
ele1=getDate()#2#Returns the day of the month (Range is 1-31)
ele2=getDay()#2#Returns the day of the week (Range is 0-6). 0=Sunday, 1=Monday, etc.
ele3=getFullYear()#2#Returns year in full 4 digit format (ie: 2004).
ele4=getHours()#2#Returns the hour (Range is 0-23).
ele5=getMilliseconds()#2#Returns the milliseconds. (Range is 0-999).
ele6=getMinutes()#2#Returns the minutes. (Range is 0-59).
ele7=getMonth()#2#Returns the month. (Range is 0-11)!
ele8=getSeconds()#2#Returns the seconds. (Range is 0-59).
ele9=getTime()#2#Returns the millisecond representation of the current Date object. In the words, the number of milliseconds between 1/1/1970 (GMT) and the current Date object.
ele10=getTimezoneOffset()#2#Returns the offset (time difference) between Greenwich Mean Time (GMT) and local time of Date object, in minutes.
ele11=getYear()#2#Returns the year, in 4 digit format or otherwise depending on browser. Deprecated in favor of getFullYear()
ele12=parse(datestring)#2#Returns the number of milliseconds in a date string since 1/1/1970. (datestring: a string containing the date/time to be parsed).
ele13=setDate(day_of_month)#2#Sets the day of the month of the Date object. (day_of_month: 1-31).
ele14=setFullYear(year, [month], [day])#2#Sets the year of the Date object. (year: 4 digit year).
ele15=setHours(hours, [minutes],[seconds], [millisec])#2#Sets the hour of the Date object. (hours: 0-23).
ele16=setMilliseconds(milli)#2#Sets the milliseconds field of the Date object. (milli: 0-999)
ele17=setMinutes(minutes, [seconds], [millisec])#2#Sets the minutes of the Date object. (minutes: 0-59).
ele18=setMonth(month, [day])#2#Sets the month of the Date object. (month: 0-11)
ele19=setSeconds(seconds, [millisec])#2#Sets the seconds of the Date object. (seconds: 0-59).
ele20=setTime(milli)#2#Sets the value of the Date object in terms of milliseconds elapsed since 1/1/1970 GMT.
ele21=setYear(year)#2#Sets the year of the Date object. "year" can be two digits (1900 is automatically added to it), or 4 digits. Deprecated over setFullYear() above.
ele22=toGMTString()#2#Converts a date to a string, using the GMT conventions. Deprecated in favor of toUTCString().
ele23=toLocaleString()#2#Converts a date to a string, using current locale conventions.
ele23=toLocaleDateString()#2#Returns the date portion of the Date as a string, using current locale conventions.
ele23=toLocaleTimeString()#2#Returns the time portion of the Date as a string, using current locale conventions.
ele24=toUTCString()#2#Converts a Date to human-readable string, in Universal time.
ele25=getUTCFullYear()#2#Returns the full 4 digit year in Universal time.
ele26=getUTCMonth()#2#Returns the month in Universal time.
ele27=getUTCDate()#2#Returns the day of the month in Universal time.
ele28=getUTCHours()#2#Returns the hour in Universal time.
ele29=getUTCMinutes()#2#Returns the minutes in Universal time.
ele30=getUTCSeconds()#2#Returns the seconds in Universal time.
ele31=getUTCMilliseconds()#2#Returns the milliseconds in Universal time.
ele32=setUTCFullYear(year, [month], [day])#2#Sets the year of the Date object in Universal time.
ele33=setUTCMonth(month, [day])#2#Sets the month in Universal time.
ele34=setUTCDate(day_of_month)#2#Sets the day of the month in Universal time.
ele35=setUTCHours(hours, [minutes], [seconds], [millisec])#2#Sets the hours in Universal time.
ele36=setUTCMinutes(minutes, [seconds], [millisec])#2#Sets the minutes in Universal time.
ele37=setUTCSeconds(seconds, [millisec])#2#Sets the seconds in Universal time.
ele38=setUTCMilliseconds(milli)#2#Sets the milliseconds in Universal time.
ele39=toString([radix])#2#Converts a Date to human-readable string.
ele40=UTC(year, month, [day], [hours], [minutes], [seconds], [milli])#2# Returns the number of milliseconds in a date string since 1/1/1970, Universal time.
ele41=valueOf()#2#Converts a Date to milliseconds. Same as getTime();.
ele42=prototype#1#Use this property to attach additional properties and/or methods that get reflected in all instances of the Date object.
ele43=getUTCDay()#2#Returns the day of the week in Universal time.

[Math]
num=26
ele1=abs(x)#2#Returns absolute value of x.
ele2=acos(x)#2#Returns arc cosine of x in radians.
ele3=asin(x)#2#Returns arc sine of x in radians.
ele4=atan(x)#2#Returns arc tan of x in radians.
ele5=atan2(y,x)#2#Counterclockwise angle between x axis and point (x,y).
ele6=ceil(x)#2#Returns the smallest integer greater than or equal to x. (round up).
ele7=cos(x)#2#Returns cosine of x, where x is in radians.
ele8=exp(x)#2#Returns e^X
ele9=floor(x)#2#Returns the largest integer less than or equal to x. (round down)
ele10=log(x)#2#Returns the natural logarithm (base E) of x.
ele11=max(a,b)#2#Returns the larger of a and b.
ele12=min(a,b)#2#Returns the lesser of a and b.
ele13=pow(x,y)#2#Returns X^Y
ele14=random()#2#Returns a pseudorandom number between 0 and 1.
ele15=round(x)#2#Rounds x up or down to the nearest integer. It rounds .5 up
ele16=sin(x)#2#Returns the Sin of x, where x is in radians.
ele17=sqrt(x)#2#Returns the square root of x.
ele18=tan(x)#2#Returns the Tan of x, where x is in radians.
ele19=E#4#The constant of E, the base of natural logarithms.
ele20=LN10#4#The natural logarithm of 10.
ele21=LN2#4#The natural logarithm of 2.
ele22=LOG10E#4#Base 10 logarithm of E.
ele23=LOG2E#4#Base 2 logarithm of E.
ele24=PI#4#Returns PI.
ele25=SQRT1_2#4#Square root of 1/2.
ele26=SQRT2#4#Square root of 2

[Number]
num=13
ele1=MAX_VALUE#4#The largest representable number in JavaScript.
ele2=MIN_VALUE#4#The smallest representable number in JavaScript.
ele3=NaN#4#"Not a number" value.
ele4=NEGATIVE_INFINITY#4#Negative infinity, returned on overflow.
ele5=POSITIVE_INFINITY#4#Infinity, returned on overflow.
ele6=prototype#1#Prototype property, to add custom properties and methods to this object.
ele7=toFixed(x)#2#Formats any number for "x" number of trailing decimals. The number is rounded up, and "0"s are used after the decimal point if needed to create the desired decimal length.
ele8=toPrecision(x)#2#Formats any number so it is of "x" length. Also called significant digits. A decimal point and "0"s are used if needed to create the desired length.
ele9=toExponential(x)#2#Returns a number in exponential notation (string format). "x" should be a number between 0 and 20, dictating the number of digits to include in the notation after the decimal place.
ele10=constructor#1#Specifies the function that creates an object's prototype.
ele11=toSource#2#Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.toSource method.
ele12=toString([radix])#2#Returns a string representing the specified object. Overrides the Object.toString method.
ele13=valueOf#2#Returns the primitive value of the specified object. Overrides the Object.valueOf method.

[event]
num=31
ele1=button#1#An integer indicating which mouse button was pressed or released, 1 = left, 2 = right, 4 = middle. If multiple buttons are pressed, the value is the sum of both buttons, such as 3 (1+2) for left and right.
ele2=cancelBubble#1#Set to true to prevent the event from bubbling.
ele3=clientX#1#Returns the mouse coordinates at the time of the event relative to upper-left corner of the window
ele4=clientY#1#Returns the mouse coordinates at the time of the event relative to upper-left corner of the window
ele5=fromElement#1#For mouseover and mouseout events, these properties indicate the elements the mouse is leaving from and moving onto, respectively.
ele6=toElement#1#For mouseover and mouseout events, these properties indicate the elements the mouse is leaving from and moving onto, respectively.
ele7=keyCode#1#Property indicating the Unicode for the key pressed. Use String.fromCharCode(keyCode) to convert code to string.
ele8=offsetX#1#Returns the mouse coordinates relative to the originating element.
ele9=offsetY#1#Returns the mouse coordinates relative to the originating element.
ele10=returnValue#1#Set to false to cancel any default action for the event.
ele11=srcElement#1#The element in which the event occurred on.
ele12=type#1#A string indicating the type of event, such as "mouseover", "click", etc.
ele13=altKey#1#Boolean properties that indicate whether the Alt, Ctrl, and Shift keys were pressed at time of the event.
ele14=ctrlKey#1#Boolean properties that indicate whether the Alt, Ctrl, and Shift keys were pressed at time of the event.
ele15=metaKey#1#Boolean properties that indicate whether the Alt, Ctrl, and Shift keys were pressed at time of the event.
ele16=shiftKey#1#Boolean properties that indicate whether the Alt, Ctrl, and Shift keys were pressed at time of the event.
ele17=bubbles#1#A Boolean value indicating whether or not the event bubbles.
ele18=cancelable#1#A Boolean value indicating whether or not the event can be canceled.
ele19=currentTarget#1#The node that this event handler is currently being run on.
ele20=eventPhase#1#An integer value indicating which phase of the event flow this event is being processed in. One of CAPTURING_PHASE (1), AT_TARGET (2) or BUBBLING_PHASE (3).
ele21=layerX#1#Returns the mouse coordinates relative to the container element. (non standard).
ele22=layerY#1#Returns the mouse coordinates relative to the container element. (non standard).
ele23=timestamp#1#The time the event occurred.
ele24=relatedTarget#1#On a "mouseover" event it indicates the node that the mouse has left. On a "mouseout" event it indicates the node the mouse has moved onto.
ele25=screenX#1#Returns the coordinates of the mouse relative to the screen when the event fired.
ele26=screenY#1#Returns the coordinates of the mouse relative to the screen when the event fired.
ele27=target#1#The node that the event originated from.
ele28=type#1#A string indicating the type of event, such as "mouseover", "click", etc.
ele29=which#1#Property indicating the Unicode for the key pressed. Use String.fromCharCode(which) to convert code to string.
ele30=preventDefault()#2#Set to true to cancel any default action for the event.
ele31=stopPropagation()#2#Set to true to prevent the event from bubbling.

[Events]
num=23
ele1=onBlur#3#Executes JavaScript code when a blur event occurs; that is, when a form element loses focus or when a window or frame loses focus.
ele2=onDragDrop#3#Executes JavaScript code when a DragDrop event occurs; that is, when the user drops an object onto the browser window, such as dropping a file.
ele3=onError#3#Not all of these properties are relevant to each event type. To learn which properties are used by an event, see the "Event object properties used" section of the individual event handler.
ele4=onFocus#3#Executes JavaScript code when a focus event occurs; that is, when a window, frame, or frameset receives focus or when a form element receives input focus.
ele5=onLoad#3#Executes JavaScript code when a load event occurs; that is, when the browser finishes loading a window or all frames within a FRAMESET tag.
ele6=onMove#3#Executes JavaScript code when a move event occurs; that is, when the user or script moves a window or frame.
ele7=onResize#3#Executes JavaScript code when a resize event occurs; that is, when a user or script resizes a window or frame.
ele8=onUnload#3#Executes JavaScript code when an unload event occurs; that is, when the user exits a document.
ele9=onAbort#3#The user aborts the loading of an image (for example by clicking a link or clicking the Stop button).
ele10=onChange#3#A select, text, or textarea field loses focus and its value has been modified.
ele11=onClick#3#An object on a form is clicked.
ele12=onDblClick#3#The user double-clicks a form element or a link.
ele13=onKeyDown#3#The user depresses a key.
ele14=onKeyPress#3#The user presses or holds down a key.
ele15=onKeyUp#3#The user releases a key.
ele16=onMouseDown#3#The user depresses a mouse button.
ele17=onMouseMove#3#The user moves the cursor.
ele18=onMouseOut#3#The cursor leaves an area (client-side image map) or link from inside that area or link.
ele19=onMouseOver#3#The cursor moves over an object or area from outside that object or area.
ele20=onMouseUp#3#The user releases a mouse button.
ele21=onReset#3#The user resets a form (clicks a Reset button).
ele22=onSelect#3#The user selects some of the text within a text or textarea field.
ele23=onSubmit#3#The user submits a form.

[plugin]
num=3
ele1=description#1
ele2=filename#1
ele3=name#1

[mimeType]
num=4
ele1=description#1
ele2=enabledPlugin#1
ele3=type#1
ele4=suffixes#1

[Object]
num=8
ele1=constructor#1#Specifies the function that's the constructor for the object.
ele2=prototype#1#Allows the addition of properties to all objects.
ele3=eval#2#Deprecated. Evaluates a string of JavaScript code in the context of the specified object.  
ele4=toSource#2#Returns an object literal representing the specified object; you can use this value to create a new object. 
ele5=toString([radix])#2#Converts a Date to human-readable string.
ele6=unwatch#2#Removes a watchpoint from a property of the object.
ele7=valueOf()#2#Returns the primitive value of an object.
ele8=watch#2#Adds a watchpoint to a property of the object.

[Global]
num=14
ele1=Infinity#1#Returns an initial value of Number.POSITIVE_INFINITY.
ele2=NaN#4#"Not a number" value.
ele3=undefined#1#Returns an initial value of undefined.
ele4=decodeURI(URIstring)#2#Returns the unencoded version of an encoded Uniform Resource Identifier (URI).
ele5=decodeURIComponent(encodedURIString)#2#Returns the unencoded version of an encoded component of a Uniform Resource Identifier (URI).
ele6=encodeURI(URIString)#2#Encodes a text string as a valid Uniform Resource Identifier (URI)
ele7=encodeURIComponent(encodedURIString)#2#Encodes a text string as a valid component of a Uniform Resource Identifier (URI).
ele8=escape(s)#2#Returns the hexadecimal encoding of an argument in the ISO-Latin-1 character set.
ele9=eval()#2#Evaluates a string of JavaScript code in the context of this object.
ele10=isFinite(x)#2#Returns the ASCII string for the specified value.
ele11=isNaN()#2#Evaluates an argument to determine if it is not a number.
ele12=parseFloat(x)#2#Returns a floating-point number converted from a string.
ele13=parseInt(x,[radix])#2#Returns an integer converted from a string.
ele14=unescape(s)#2#Returns the ASCII string for the specified value.

[Function]
num=14
ele1=arguments[arg1,[argn]]#1#A local variable that points to the Arguments object, which in turn contains all of the arguments passed into the function. Use "arguments.length" to determine the number of arguments entered. Note that this is different from the old arguments[] array, which has been deprecated in JavaScript 1.2
ele2=arguments.callee#1#Specifies the function body of the currently executing function.
ele3=arguments.caller#1#Specifies the name of the function that invoked the currently executing function.  
ele4=arguments.length#1#Specifies the number of arguments passed to the function.  
ele5=arity#1#Specifies the number of arguments expected by the function.
ele6=apply(thisArg[, argArray])#2#Allows you to apply a method of another object in the context of a different object (the calling object).
ele7=caller#1#References the invoking function, if any.
ele8=call(thisArg[, arg1[, arg2[, ...]]])#2#Allows you to call (execute) a method of another object in the context of a different object (the calling object).  
ele9=constructor#1#Specifies the function that creates an object's prototype.  
ele10=length#1#Returns the number of named arguments specified.
ele11=prototype#1#Prototype property, to add custom properties and methods to this object.
ele12=toString([radix])#2#Returns a string representing the specified object.
ele13=toSource#2#Returns a string representing the source code of the function. Overrides the Object.toSource method.  
ele14=valueOf#2#Returns a string representing the source code of the function. Overrides the Object.valueOf method

[RegExp]
num=11
ele1=constructor#1#Specifies the function that creates an object's prototype.
ele2=global#1#Whether to test the regular expression against all possible matches in a string, or only against the first. As of JavaScript 1.5, a property of a RegExp instance, not the RegExp object.
ele3=ignoreCase#1#Whether to ignore case while attempting a match in a string. As of JavaScript 1.5, a property of a RegExp instance, not the RegExp object.
ele4=lastIndex#1#The index at which to start the next match. As of JavaScript 1.5, a property of a RegExp instance, not the RegExp object. 
ele5=multiline#1#Whether or not to search in strings across multiple lines. As of JavaScript 1.5, a property of a RegExp instance, not the RegExp object. 
ele6=prototype#1#Allows the addition of properties to all objects.
ele7=source#1#The text of the pattern. As of JavaScript 1.5, a property of a RegExp instance, not the RegExp object.
ele8=exec([string])#2#Executes a search for a pattern within a string. If the pattern is not found, exec() returns a null value. If it finds one or more matches it returns an array of the match results. It also updates some of the properties of the parent RegExp object.
ele9=test([string])#2#Tests a string for pattern matches. This method returns a Boolean that indicates whether or not the specified pattern exists within the searched string. This is the most commonly used method for validation. It updates some of the properties of the parent RegExp object following a successful search.
ele10=toSource()#2#Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.toSource method.
ele11=toString()#2#Returns a string representing the specified object. Overrides the Object.toString method.  

[functions]
num=15
ele1=eval(s)#Evaluates a string of JavaScript code in the context of this object.
ele2=isNaN(x)#Evaluates an argument to determine if it is not a number.
ele3=parseInt(x,[radix])#Returns an integer converted from a string.
ele4=parseFloat(x)#Returns a floating-point number converted from a string.
ele5=escape(s)#Returns the hexadecimal encoding of an argument in the ISO-Latin-1 character set.
ele6=unescape(s)#Returns the ASCII string for the specified value.
ele7=isFinite(x)#Returns a Boolean value that indicates if a supplied number is finite.
ele8=alert(msg)#Displays an Alert dialog box with a message and an OK button.
ele9=confirm(msg)#Represents a browser window or frame. This is the top-level object for each document, Location, and History object group.
ele10=prompt(msg,[input])#Represents a browser window or frame. This is the top-level object for each document, Location, and History object group.
ele11=GetObject([pathname] [, class])#Returns a reference to an Automation object from a file.
ele12=ScriptEngine()#Returns a string representing the scripting language in use.
ele13=ScriptEngineBuildVersion()#Returns the build version number of the scripting engine in use.
ele14=ScriptEngineMajorVersion()#Returns the major version number of the scripting engine in use.
ele15=ScriptEngineMinorVersion()#Returns the minor version number of the scripting engine in use.

[Array]
num=22
ele1=concat(value1, ...)#2#Concatenates all the argument values to the existing array, and returns the new array. Values can be another array
ele2=join([separator])#2#Converts each element within the array to a string, and joins them into one large string. Pass in an optional separator as argument to be used to separate each array element. If none is passed, the default comma (') is used.
ele3=pop()#2#Deletes the last element within array and returns the deleted element. Original array is modified.
ele4=push(value1, ...)#2#Adds the argument values to the end of the array, and modifies the original array with the new additions. Returns the new length of the array.
ele5=reverse()#2#Reverses the order of all elements within the array. Original array is modified.
ele6=shift()#2#Deletes and returns the first element within the array. Original array is modified to account for the missing element (so 2nd element now becomes the first etc).
ele7=slice(start, [end])#2#Returns a "slice" of the original array based on the start and end arguments. The slice includes the new array referenced by the start index and up to but NOT including the end index itself. If "end" is not specified, the end of the array is assumed.
ele8=sort([SortFunction])#2#Sorts an array alphabetically and ascending. By passing in an optional SortFunction, you may sort numerically and by other criteria as well.
ele9=toSource()#2#Returns an array literal representing the specified array.
ele10=toString([radix])#2#Returns a string representing the array and its elements.
ele11=unshift(value1, ...)#2#Adds the argument values to the beginning of the array, pushing existing arrays back. Returns the new length of the array. Original array is modified.
ele12=valueOf()#2#Returns the primitive value of the array.
ele13=length#1#A read/write property indicating the current number of elements within the array. You may set this property to dynamically expand an array's length.
ele14=prototype#1#Use this property to attach additional properties and/or methods that get reflected in all instances of the array
ele15=splice(startIndex, [how_many], [value1, ...])#2#Deletes how_many array elements starting from startIndex, and replaces them with value1, value2 etc. Returns the elements deleted from array.
ele16=indexOf()#2#returns the index of the given item's first occurrence
ele17=lastIndexOf()#2#returns the index of the given item's last occurrence
ele18=every()#2#runs a function on every item in the array and returns true if the function returns true for every item.
ele19=filter()#2#runs a function on every item in the array and returns an array of all items for which the function returns true.
ele20=forEach()#2#runs a function on every item in the array.
ele21=map()#2#runs a function on every item in the array and returns the results in an array.
ele22=some()#2#runs a function on every item in the array and returns true if the function returns true for any one item. 

[Boolean]
num=5
ele1=constructor#1#Specifies the function that created the object's prototype.
ele2=prototype#1#Allows you to define properties on the Boolean that is shared by all Boolean objects.
ele3=toString([radix])#2#Returns a string specifying the value of the Boolean, in this case, "true" or "false."
ele4=valueOf()#2#Returns the primitive value of a Boolean object.
ele5=toSource()#2#Returns an object literal representing the specified Boolean object; you can use this value to create a new object

[image]
num=13
ele1=onabort()#3#Code is executed when user aborts the downloading of the image.
ele2=onerror()#3#Code is executed when an error occurs with the loading of the image (ie: not found)
ele3=onload()#3#Code is executed when the image successfully and completely downloads.
ele4=border#1#Integer that specifies the border width of the image, in pixels.
ele5=complete#1#Boolean that specifies whether the image has loaded completely (successful or not).
ele6=height#1#The height of the image.
ele7=hspace#1#Reflects the "hspace" attribute.
ele8=lowsrc#1#Reflects the "lowsrc" attribute.
ele9=name#1#The name of the image as assigned by the "name" attribute.
ele10=src#1#A read/write string specifying the URL of the image
ele11=vspace#1#Reflects the "vspace" attribute.
ele12=width#1#The width of the image.
ele13=fileSize#1#Returns the file size of the specified image on the page. In IE Windows, a numeric string is returned, while in IE Mac, a number instead. Use it on any image or a loop to cover all images on the page. IE only property.

[link]
num=15
ele1=hash#1#Specifies the anchor portion of the link. (ie: "section2").
ele2=host#1#Specifies the host and domain name of a network host. (ie: www.mysite.com).
ele3=hostname#1#Specifies the hostname portion of the link (ie: www.mysite.com).
ele4=href#1#Specifies the entire link.
ele5=pathname#1#Specifies the path name of the link (ie: /good.htm).
ele6=port#1#Specifies the port portion of the link.
ele7=protocol#1#Specifies the protocol portion of the link (ie: http:).
ele8=search#1#Specifies the query portion of the link (ie: ?sort=alpha)
ele9=target#1#Specifies the target attribute of the link.
ele10=onClick()#3#Code is executed when user clicks on link. Return false to disable link
ele11=onDblClick()#3#Code is executed when user double clicks on link.
ele12=onMouseDown()#3#Code is executed when user holds mouse down over link.
ele13=onMouseUp()#3#Code is executed when user releases mouse from link.
ele14=onMouseOver()#3#Code is executed when user moves mouse over link
ele15=onMouseOut()#3#Code is executed when user moves mouse out of link.

[Area]
num=15
ele1=hash#1#Specifies the anchor portion of the link. (ie: "section2").
ele2=host#1#Specifies the host and domain name of a network host. (ie: www.mysite.com).
ele3=hostname#1#Specifies the hostname portion of the link (ie: www.mysite.com).
ele4=href#1#Specifies the entire link.
ele5=pathname#1#Specifies the path name of the link (ie: /good.htm).
ele6=port#1#Specifies the port portion of the link.
ele7=protocol#1#Specifies the protocol portion of the link (ie: http:).
ele8=search#1#Specifies the query portion of the link (ie: ?sort=alpha)
ele9=target#1#Specifies the target attribute of the link.
ele10=onClick()#3#Code is executed when user clicks on link. Return false to disable link
ele11=onDblClick()#3#Code is executed when user double clicks on link.
ele12=onMouseDown()#3#Code is executed when user holds mouse down over link.
ele13=onMouseUp()#3#Code is executed when user releases mouse from link.
ele14=onMouseOver()#3#Code is executed when user moves mouse over link
ele15=onMouseOut()#3#Code is executed when user moves mouse out of link.

[Anchor]
num=1
ele1=name#1#A string specifying the anchor's name.

[form]
num=11
ele1=action#1#Read/write string that reflects the action attribute of the form.
ele2=elements[]#5#An array containing all of the elements of the form. Use it to loop through form easily.
ele3=encoding#1#Read/write string that specifies how the form data is encoded.
ele4=length#1#The number of elements in the form.
ele5=method#1#Read/write string that specifies how the method the form is submitted.
ele6=name#1#The name of the form.
ele7=target#1#The name of the target frame or window form is to be submitted to.
ele8=reset()#2#Resets the form.
ele9=submit()#2#Submits a form
ele10=onReset#3#Code is executed when the form is reset (by clicking on "reset" button)
ele11=onSubmit#3#Code is executed when form is submitted.

[text]
num=16
ele1=onBlur()#3#Code is executed when the focus is removed from the text field.
ele2=onChange()#3#Code is executed when the user changes the value within the text field, and removes focus away from the field
ele3=onFocus()#3#Code is executed when the focus is set on the text field.
ele4=onKeyDown()#3#Code is executed when user presses down the key within the text field.
ele5=onKeyPress()#3#Code is executed when user presses the key within the text field.
ele6=onKeyUp()#3#Code is executed when user releases a key within the text field
ele7=onSelect()#3#Code is executed when user selects some text within the text field.
ele8=accessKey#1#String value that sets/ returns the accessKey for the field.
ele9=disabled#1#Boolean value that sets/ returns whether the field is disabled.
ele10=form#1#References the form that contains the text field.
ele11=name#1#Reflects the name of the text field (the name attribute).
ele12=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "text".
ele13=value#1#Read/write string that specifies the value of the text field.
ele14=blur()#2#Removes focus away from the text field.
ele15=focus()#2#Sets focus on the text field.
ele16=select()#2#Highlights the content of the text field.

[textarea]
num=16
ele1=onBlur()#3#Code is executed when the focus is removed from the textarea.
ele2=onChange()#3#Code is executed when the user changes the value within the textarea, and removes focus away from the field.
ele3=onFocus()#3#Code is executed when the focus is set on the textarea.
ele4=onKeyDown()#3#Code is executed when user presses down the key within the textarea.
ele5=onKeyPress()#3#Code is executed when user presses the key within the textarea.
ele6=onKeyUp()#3#Code is executed when user releases a key within the textarea.
ele7=onSelect()#3#Code is executed when user selects some text within the textarea.
ele8=accessKey#1#String value that sets/ returns the accessKey for the field.
ele9=disabled#1#Boolean value that sets/ returns whether the field is disabled.
ele10=form#1#References the form that contains the textarea.
ele11=name#1#Reflects the name of the textarea (the name attribute).
ele12=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "Textarea".
ele13=value#1#Read/write string that specifies the value of the textarea.
ele14=blur()#2#Removes focus away from the textarea.
ele15=focus()#2#Sets focus on the textarea.
ele16=select()#2#Highlights the content of the textarea.

[password]
num=10
ele1=blur()#2#Removes focus away from the password field.
ele2=focus()#2#Sets focus on the password field.
ele3=select()#2#Selects the input area of the password field.
ele4=disabled#1#Boolean value that sets/ returns whether the field is disabled.
ele5=form#1#References the form that contains the password field.
ele6=name#1#Reflects the name of the password field (the name attribute).
ele7=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "password".
ele8=value#1#A read/write string that specifies the value of the password field. Note that due to security reasons, some browsers may not return the actual value of the password when this property is invoked.
ele9=onBlur()#3#Code is executed when the focus is removed from the password field.
ele10=onFocus()#3#Code is executed when the focus is set on the password field.

[hidden]
num=4
ele1=form#1#References the form that contains the Hidden field.
ele2=name#1#Reflects the name of the Hidden field (the name attribute).
ele3=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "hidden"
ele4=value#1#A read/write string that specifies the value of the Hidden field.

[select]
num=12
ele1=onBlur()#3#Code is executed when the focus is removed from the selection list.
ele2=onChange()#3#Code is executed when the option within menu changes, through the user selecting another option.
ele3=onFocus()#3#Code is executed when the focus is set on the selection list.
ele4=disabled#1#Boolean value that sets/ returns whether the select menu is disabled.
ele5=form#1#References the form that contains the selection list in question.
ele6=length#1#Reflects the number of options in the selection list.
ele7=name#1#Reflects the name of the selection list (the name attribute).
ele8=options[]#5#An array of Options objects, for each option within the selection list.
ele9=selectedIndex#1#An integer reflecting the index of the selected option. If non is selected, -1 is returned. If multiple options are selected, it returns the index of the first selected option
ele10=type#1#A property available on all form elements, "type" returns the type of the calling form element. For selection lists, the two possible values are "select-one" or "select-multiple", depending on the type of selection list.
ele11=blur()#2#Removes focus away from the selection list.
ele12=focus()#2#Sets focus on the selection list.

[button]
num=10
ele1=blur()#2#Removes focus away from the button.
ele2=clic()#2#Simulates a user clicking on the form button
ele3=focus()#2#Sets focus on the button
ele4=form#1#References the form that contains the reset button.
ele5=name#1#Reflects the name of the button (the name attribute).
ele6=onClick()#3#Code is executed when user clicks on the button
ele7=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "button"
ele8=value#1#A read only string that specifies the value of the button.
ele9=accessKey#1#String value that sets/ returns the accessKey for the button
ele10=disabled#1#Boolean value that sets/ returns whether the button is disabled.

[reset]
num=6
ele1=onClick()#3#Code is executed when user clicks on the reset button.
ele2=disabled#1#Boolean value that sets/ returns whether the reset button is disabled.
ele3=form#1#References the form that contains the reset button
ele4=name#1#Reflects the name of the reset button (the name attribute).
ele5=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "reset"
ele6=value#1#A read only string that specifies the value of the reset button.

[submit]
num=6
ele1=onClick()#3#Code is executed when the user clicks on the submit button. By returning false in this event, you may cancel the form submission. eg: <input type="submit" onClick="return false">
ele2=disabled#1#Boolean value that sets/ returns whether the submit button is disabled.
ele3=form#1#References the form that contains the submit button.
ele4=name#1#Reflects the name of the submit button (the name attribute).
ele5=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "submit".
ele6=value#1#A read only string that specifies the value of the submit button.

[checkbox]
num=14			
ele1=blur()#2#Removes focus away from the checkbox.
ele2=checked#1#Boolean property that reflects the current state of the checkbox, "true" if it's checked, and "false" if not.
ele3=click()#2#Simulates a user clicking on the checkbox.
ele4=defaultChecked#1#Boolean property that reflects the value of the CHECKED attribute.
ele5=focus()#2#Sets focus on the checkbox.
ele6=form#1#References the form that contains the checkbox.
ele7=name#1#References the form that contains the checkbox.
ele8=onBlur()#3#Code is executed when the focus is removed from the checkbox.
ele9=onClick()#3#Code is executed when user clicks on the checkbox.
ele10=onFocus()#3#Code is executed when the focus is set on the checkbox.
ele11=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "checkbox".
ele12=value#1#A read/write string that specifies the value of the checkbox (the value attribute)
ele13=accessKey#1#String value that sets/ returns the accessKey for the checkbox.
ele14=disabled#1#Boolean value that sets/ returns whether the checkbox is disabled.

[radio]
num=12
ele1=onBlur()#3#Code is executed when the focus is removed from the radio button.
ele2=onClick()#3#Code is executed when user clicks on the radio button.
ele3=onFocus()#3#Code is executed when the focus is set on the radio button.
ele4=checked#1#Boolean property that reflects the current state of the radio button, "true" if it's checked, and "false" if not.
ele5=defaultChecked#1#Boolean property that reflects the value of the CHECKED attribute.
ele6=form#1#References the form that contains the radio button
ele7=name#1#Reflects the name of the radio button (the name attribute).
ele8=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "radio".
ele9=value#1#A read/write string that specifies the value of the radio button (the value attribute).
ele10=blur()#2#Removes focus away from the radio button.
ele11=click()#2#Simulates a user clicking on the radio button.
ele12=focus()#2#Sets focus on the radio button.

[fileUpload]
num=12
ele1=blur()#2#Removes focus away from the fileUpload field.
ele2=focus()#2#Sets focus on the fileUpload field.
ele3=form#1#References the form that contains the fileUpload field.
ele4=name#1#Reflects the name of the fileUpload field (the name attribute).
ele5=onBlur()#3#Code is executed when the focus is removed from the fileUpload field.
ele6=onFocus()#3#Code is executed when the focus is set on the fileUpload field.
ele7=onChange()#3#Code is executed when user changes the value within the fileUpload field and moves focus away from field.
ele8=value#1#A read only string that specifies the file name entered into the fileUpload field.
ele9=select()#2#Selects the input area of the fileUpload field.
ele10=type#1#A property available on all form elements, "type" returns the type of the calling form element, in this case, "file".
ele11=accessKey#1#String value that sets/ returns the accessKey for the field.
ele12=disabled#1#Boolean value that sets/ returns whether the field is disabled.

[language]
num=62
ele1=abstract
ele2=boolean
ele3=break#Terminates the current while or for loop and transfers program control to the statement following the terminated loop.
ele4=byte
ele5=case
ele6=catch#Implements error handling for JScript.
ele7=char
ele8=class
ele9=const#Declares a read-only constant.
ele10=continue#Terminates execution of the block of statements in a while or for loop, and continues execution of the loop with the next iteration.
ele11=default
ele12=delete#Deletes an object's property or an element at a specified index in an array.
ele13=do..while#Executes its statements until the test condition evaluates to false. Statement is executed at least once.
ele14=double
ele15=else#Executes a set of statements if a specified condition is true. If the condition is false, another set of statements can be executed.
ele16=extends
ele17=false
ele18=final
ele19=finally#Implements error handling for JavaScript.
ele20=float
ele21=for#Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a block of statements executed in the loop.
ele22=function#Declares a JavaScript function with the specified parameters. Acceptable parameters include strings, numbers, and objects.
ele23=goto
ele24=if#Executes a set of statements if a specified condition is true. If the condition is false, another set of statements can be executed.
ele25=implements
ele26=import#Allows a script to import properties, functions, and objects from a signed script which has exported the information.
ele27=in
ele28=instanceof#Returns true if the specified object is of the specified object type.
ele29=int
ele30=interface
ele31=long
ele32=native
ele33=new#An operator that lets you create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.
ele34=null
ele35=package
ele36=private
ele37=protected
ele38=public
ele39=return#Specifies the value to be returned by a function.
ele40=short
ele41=static
ele42=super
ele43=switch#Allows a program to evaluate an expression and attempt to match the expression's value to a case label.
ele44=synchronized
ele45=this#A keyword that you can use to refer to the current object. In general, in a method this refers to the calling object.
ele46=throw#Implements error handling for JavaScript.
ele47=throws
ele48=transient
ele49=true
ele50=try
ele51=typeof#The typeof operator returns a string indicating the type of the unevaluated operand. operand is the string, variable, keyword, or object for which the type is to be returned. The parentheses are optional.
ele52=var#Declares a variable, optionally initializing it to a value.
ele53=void#The void operator specifies an expression to be evaluated without returning a value. expression is a JavaScript expression to evaluate.
ele54=while#Creates a loop that evaluates an expression, and if it is true, executes a block of statements. The loop then repeats, as long as the specified condition is true.
ele55=with#Establishes the default object for a set of statements. Within the set of statements, any property references that do not specify an object are assumed to be for the default object.
ele56=debugger#Starts the debugger.
ele57=enum
ele58=export#The objectName parameter is the name of the object that will receive the imported names. For example, if f and p have been exported, and if obj is an object from the importing script, the following code makes f and p accessible in the importing script as properties of obj.
ele59=for..in#Iterates a specified variable over all the properties of an object. For each distinct property, JavaScript executes the specified statements.
ele60=function#Declares a function with the specified parameters. Acceptable parameters include strings, numbers, and objects
ele61=import#Allows a script to import properties, functions, and objects from a signed script that has exported the information.
ele62=label#Provides an identifier that can be used with break or continue to indicate where the program should continue execution.

[operators]
num=6
ele1=arithmetic
ele2=comparison
ele3=assignment
ele4=logical
ele5=bitwise
ele6=others

[arithmetic]
num=7
ele1=+#(Addition) Adds 2 numbers.
ele2=-#(Unary negation, subtraction) As a unary operator, negates the value of its argument. As a binary operator, subtracts 2 numbers.
ele3=*#(Multiplication) Multiplies 2 numbers.
ele4=/#(Division) Divides 2 numbers.
ele5=%#(Modulus) Computes the integer remainder of dividing 2 numbers.
ele6=++#(Increment) Adds one to a variable representing a number (returning either the new or old value of the variable)
ele7=--#(Decrement) Subtracts one from a variable representing a number (returning either the new or old value of the variable)

[comparison]
num=6
ele1===#Returns true if the operands are equal.
ele2====#Tests for equality between two operands both in terms of value and type. Supported in JavaScript 1.3+
ele3=<#Returns true if left operand is less than right operand.
ele4=<=#Returns true if left operand is less than or equal to right operand.
ele5=>#Returns true if left operand is greater than right operand.
ele6=>=#Returns true if left operand is greater than or equal to right operand.

[assignment]
num=12
ele1==#Assigns the value of the second operand to the first operand.
ele2=+=#Adds 2 numbers and assigns the result to the first.
ele3=-=#Subtracts 2 numbers and assigns the result to the first.
ele4=*=#Multiplies 2 numbers and assigns the result to the first.
ele5=/=#Divides 2 numbers and assigns the result to the first.
ele6=%=#Computes the modulus of 2 numbers and assigns the result to the first.
ele7=&=#Performs a bitwise AND and assigns the result to the first operand.
ele8=^=#Performs a bitwise XOR and assigns the result to the first operand.
ele9=|=#Performs a bitwise OR and assigns the result to the first operand.
ele10=<<=#Performs a left shift and assigns the result to the first operand.
ele11=>>=#Performs a sign-propagating right shift and assigns the result to the first operand.
ele12=>>>=#Performs a zero-fill right shift and assigns the result to the first operand.

[logical]
num=3
ele1=&&#(Logical AND) Returns true if both logical operands are true. Otherwise, returns false.
ele2=||#(Logical OR) Returns true if either logical expression is true. If both are false, returns false.
ele3=!#(Logical negation) If its single operand is true, returns false; otherwise, returns true.

[bitwise]
num=6
ele1=&#(Bitwise AND) Returns a one in each bit position if bits of both operands are ones.
ele2=|#(Bitwise OR) Returns a one in a bit if bits of either operand is one.
ele3=^#(Bitwise XOR) Returns a one in a bit position if bits of one but not both operands are one.
ele4=<<#(Left shift) Shifts its first operand in binary representation the number of bits to the left specified in the second operand, shifting in zeros from the right.
ele5=>>#(Sign-propagating right shift) Shifts the first operand in binary representation the number of bits to the right specified in the second operand, discarding bits shifted off.
ele6=>>>#(Zero-fill right shift) Shifts the first operand in binary representation the number of bits to the right specified in the second operand, discarding bits shifted off, and shifting in zeros from the left.
ele7=~#(Bitwise NOT) Flips the bits of its operand.

[others]
num=3
ele1=?:#Lets you perform a simple "if...then...else"
ele2=typeof
ele3=,#Evaluates two expressions and returns the result of the second expression.

[control]
num=11
ele1=if (expression)
ele2=if/else
ele3=switch (exp) { case 1: condition break:
ele4=ret = cond 1 ? exp1 : exp2
ele5=for (begin;condition;increment) {}
ele6=for (var in object) {}
ele7=while (object) {}
ele8=with (object) {}
ele9=do {sentences} while (condition)
ele10=label
ele11=continue [label]
ele12=break [label]