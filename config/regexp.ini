[regular_expresion]
num=36

[regexp1]
name=\
help=4
h1=For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.
h2=For example, /b/ matches the character 'b'. By placing a backslash in front of b, that is by using /\b/, the character becomes special to mean match a word boundary.
h3=For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.
h4=For example, * is a special character that means 0 or more occurrences of the preceding item should be matched; for example, /a*/ means match 0 or more a's. To match * literally, precede the it with a backslash; for example, /a\*/ matches 'a*'. 

[regexp2]
name=^
help=2
h1=Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.
h2=For example, /^A/ does not match the 'A' in "an A", but does match the first 'A' in "An A".  

[regexp3]
name=$
help=2
h1=Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character.
h2=For example, /t$/ does not match the 't' in "eater", but does match it in "eat".  

[regexp4]
name=*
help=2
h1=Matches the preceding character 0 or more times.
h2=For example, /bo*/ matches 'boooo' in "A ghost booooed" and 'b' in "A bird warbled", but nothing in "A goat grunted".  

[regexp5]
name=+
help=2
h1=Matches the preceding character 1 or more times. Equivalent to {1,}.
h2=For example, /a+/ matches the 'a' in "candy" and all the a's in "caaaaaaandy".  

[regexp6]
name=?
help=4
h1=Matches the preceding character 0 or 1 time.
h2=For example, /e?le?/ matches the 'el' in "angel" and the 'le' in "angle."
h3=If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).
h4=Also used in lookahead assertions, described under x(?=y) and x(?!y) in this table.  

[regexp7]
name=.
help=2
h1=(The decimal point) matches any single character except the newline character.
h2=For example, /.n/ matches 'an' and 'on' in "nay, an apple is on the tree", but not 'nay'.  

[regexp8]
name=(x)
help=2
h1=Matches 'x' and remembers the match. These are called capturing parentheses.
h2=For example, /(foo)/ matches and remembers 'foo' in "foo bar." The matched substring can be recalled from the resulting array's elements [1], ..., [n].  

[regexp9]
name=(?:x)
help=1
h1=Matches 'x' but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n]. 

[regexp10]
name=x(?=y)
help=1
h1=Matches 'x' only if 'x' is followed by 'y'. For example, /Jack(?=Sprat)/ matches 'Jack' only if it is followed by 'Sprat'. /Jack(?=Sprat|Frost)/matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.  

[regexp11]
name=x(?!y)
help=1
h1=Matches 'x' only if 'x' is not followed by 'y'. For example, /\d+(?!\.)/ matches a number only if it is not followed by a decimal point. The regular expression /\d+(?!\.)/.exec("3.141") matches 141 but not 3.141.

[regexp12]
name=x|y
help=1
Matches either 'x' or 'y'.
h1=For example, /green|red/ matches 'green' in "green apple" and 'red' in "red apple."  

[regexp13]
name={n}
help=2
h1=Where n is a positive integer. Matches exactly n occurrences of the preceding character.
h2=For example, /a{2}/ doesn't match the 'a' in "candy," but it matches all of the a's in "caandy," and the first two a's in "caaandy."  

[regexp14]
name={n,}
help=2
h1=Where n is a positive integer. Matches at least n occurrences of the preceding character.
h2=For example, /a{2,} doesn't match the 'a' in "candy", but matches all of the a's in "caandy" and in "caaaaaaandy."  

[regexp15]
name={n,m}
help=
h1=Where n and m are positive integers. Matches at least n and at most m occurrences of the preceding character.
h2=For example, /a{1,3}/ matches nothing in "cndy", the 'a' in "candy," the first two a's in "caandy," and the first three a's in "caaaaaaandy" Notice that when matching "caaaaaaandy", the match is "aaa", even though the original string had more a's in it.  

[regexp16]
name=[xyz]
help=2
h1=A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen.
h2=For example, [abcd] is the same as [a-d]. They match the 'b' in "brisket" and the 'c' in "ache".  

[regexp17]
name=[^xyz]
help=2
h1=A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen.
h2=For example, [^abc] is the same as [^a-c]. They initially match 'r' in "brisket" and 'h' in "chop."  

[regexp18]
name=[\b]
help=1
h1=Matches a backspace. (Not to be confused with \b.)  

[regexp19]
name=\b
help=2
h1=Matches a word boundary, such as a space or a newline character. (Not to be confused with [\b].)
h2=For example, /\bn\w/ matches the 'no' in "noonday";/\wy\b/ matches the 'ly' in "possibly yesterday."  

[regexp20]
name=\B
help=2
h1=Matches a non-word boundary.
h2=For example, /\w\Bn/ matches 'on' in "noonday", and /y\B\w/ matches 'ye' in "possibly yesterday." 

[regexp21]
name=\cX
help=2
h1=Where X is a control character. Matches a control character in a string.
h2=For example, /\cM/ matches control-M in a string.  

[regexp22]
name=\d
help=2
h1=Matches a digit character. Equivalent to [0-9].
h2=For example, /\d/ or /[0-9]/ matches '2' in "B2 is the suite number."  

[regexp23]
name=\D
help=2
h1=Matches any non-digit character. Equivalent to [^0-9].
h2=For example, /\D/ or /[^0-9]/ matches 'B' in "B2 is the suite number."  

[regexp24]
name=\f
help=1
h1=Matches a form-feed. 

[regexp25]
name=\n
help=1
h1=Matches a linefeed.

[regexp26]
name=\r
help=1
h1=Matches a carriage return.  

[regexp27]
name=\s
help=2
h1=Matches a single white space character, including space, tab, form feed, line feed. Equivalent to [ \f\n\r\t\v\u00A0\u2028\u2029].
h2=For example, /\s\w*/ matches ' bar' in "foo bar." 

[regexp28]
name=\S
help=2
h1=Matches a single character other than white space. Equivalent to [ ^\f\n\r\t\v\u00A0\u2028\u2029].
h2=For example, /\S\w*/ matches 'foo' in "foo bar."  

[regexp29]
name=\t
help=1
h1=Matches a tab. 

[regexp30]
name=\v
help=1
h1=Matches a vertical tab. 

[regexp31]
name=\w
help=2
h1=Matches any alphanumeric character including the underscore. Equivalent to [A-Za-z0-9_].
h2=For example, /\w/ matches 'a' in "apple," '5' in "$5.28," and '3' in "3D." 

[regexp32]
name=\W
help=2
h1=Matches any non-word character. Equivalent to [^A-Za-z0-9_].
h2=For example, /\W/ or /[^$A-Za-z0-9_]/ matches '%' in "50%."  

[regexp33]
name=\n
help=2
h1=Where n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).
h2=For example, /apple(,)\sorange\1/ matches 'apple, orange,' in "apple, orange, cherry, peach."  

[regexp34]
name=\0
help=1
h1=Matches a NUL character. Do not follow this with another digit. 

[regexp35]
name=\xhh
help=1
h1=Matches the character with the code hh (two hexadecimal digits)

[regexp36]
name=\uhhhh
help=1
h1=Matches the character with code hhhh (four hexadecimal digits).