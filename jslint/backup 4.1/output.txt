
<SCRIPT src="jslint.js"></SCRIPT>

<FORM name=jslint><TEXTAREA name=input>
//*****************************************************************************
// Do not remove this notice.
//
// Copyright 2000-2004 by Mike Hall.
// See http://www.brainjar.com for terms of use.
//*****************************************************************************

//----------------------------------------------------------------------------
// Code to determine the browser and version.
//----------------------------------------------------------------------------

function Browser() {

  var ua, s, i;

  this.isIE    = false;  // Internet Explorer
  this.isOP    = false;  // Opera
  this.isNS    = false;  // Netscape
  this.version = null;

  ua = navigator.userAgent;

  s = "Opera";
  if ((i = ua.indexOf(s)) &gt;= 0) {
    this.isOP = true;
    this.version = parseFloat(ua.substr(i + s.length));
    return;
  }

  s = "Netscape6/";
  if ((i = ua.indexOf(s)) &gt;= 0) {
    this.isNS = true;
    this.version = parseFloat(ua.substr(i + s.length));
    return;
  }

  // Treat any other "Gecko" browser as Netscape 6.1.

  s = "Gecko";
  if ((i = ua.indexOf(s)) &gt;= 0) {
    this.isNS = true;
    this.version = 6.1;
    return;
  }

  s = "MSIE";
  if ((i = ua.indexOf(s))) {
    this.isIE = true;
    this.version = parseFloat(ua.substr(i + s.length));
    return;
  }
}

var browser = new Browser();

//----------------------------------------------------------------------------
// Code for handling the menu bar and active button.
//----------------------------------------------------------------------------

var activeButton = null;

// Capture mouse clicks on the page so any active button can be
// deactivated.

if (browser.isIE)
  document.onmousedown = pageMousedown;
else
  document.addEventListener("mousedown", pageMousedown, true);

function pageMousedown(event) {

  var el;

  // If there is no active button, exit.

  if (activeButton == null)
    return;

  // Find the element that was clicked on.

  if (browser.isIE)
    el = window.event.srcElement;
  else
    el = (event.target.tagName ? event.target : event.target.parentNode);

  // If the active button was clicked on, exit.

  if (el == activeButton)
    return;

  // If the element is not part of a menu, reset and clear the active
  // button.

  if (getContainerWith(el, "DIV", "menu") == null) {
    resetButton(activeButton);
    activeButton = null;
  }
}

function buttonClick(event, menuId) {

  var button;

  // Get the target button element.

  if (browser.isIE)
    button = window.event.srcElement;
  else
    button = event.currentTarget;

  // Blur focus from the link to remove that annoying outline.

  button.blur();

  // Associate the named menu to this button if not already done.
  // Additionally, initialize menu display.

  if (button.menu == null) {
    button.menu = document.getElementById(menuId);
    if (button.menu.isInitialized == null)
      menuInit(button.menu);
  }

  // Reset the currently active button, if any.

  if (activeButton != null)
    resetButton(activeButton);

  // Activate this button, unless it was the currently active one.

  if (button != activeButton) {
    depressButton(button);
    activeButton = button;
  }
  else
    activeButton = null;

  return false;
}

function buttonMouseover(event, menuId) {

  var button;

  // Find the target button element.

  if (browser.isIE)
    button = window.event.srcElement;
  else
    button = event.currentTarget;

  // If any other button menu is active, make this one active instead.

  if (activeButton != null &amp;&amp; activeButton != button)
    buttonClick(event, menuId);
}

function depressButton(button) {

  var x, y;

  // Update the button's style class to make it look like it's
  // depressed.

  button.className += " menuButtonActive";

  // Position the associated drop down menu under the button and
  // show it.

  x = getPageOffsetLeft(button);
  y = getPageOffsetTop(button) + button.offsetHeight;

  // For IE, adjust position.

  if (browser.isIE) {
    x += button.offsetParent.clientLeft;
    y += button.offsetParent.clientTop;
  }

  button.menu.style.left = x + "px";
  button.menu.style.top  = y + "px";
  button.menu.style.visibility = "visible";

  // For IE; size, position and show the menu's IFRAME as well.

  if (button.menu.iframeEl != null)
  {
    button.menu.iframeEl.style.left = button.menu.style.left;
    button.menu.iframeEl.style.top  = button.menu.style.top;
    button.menu.iframeEl.style.width  = button.menu.offsetWidth + "px";
    button.menu.iframeEl.style.height = button.menu.offsetHeight + "px";
    button.menu.iframeEl.style.display = "";
  }
}

function resetButton(button) {

  // Restore the button's style class.

  removeClassName(button, "menuButtonActive");

  // Hide the button's menu, first closing any sub menus.

  if (button.menu != null) {
    closeSubMenu(button.menu);
    button.menu.style.visibility = "hidden";

    // For IE, hide menu's IFRAME as well.

    if (button.menu.iframeEl != null)
      button.menu.iframeEl.style.display = "none";
  }
}

//----------------------------------------------------------------------------
// Code to handle the menus and sub menus.
//----------------------------------------------------------------------------

function menuMouseover(event) {

  var menu;

  // Find the target menu element.

  if (browser.isIE)
    menu = getContainerWith(window.event.srcElement, "DIV", "menu");
  else
    menu = event.currentTarget;

  // Close any active sub menu.

  if (menu.activeItem != null)
    closeSubMenu(menu);
}

function menuItemMouseover(event, menuId) {

  var item, menu, x, y;

  // Find the target item element and its parent menu element.

  if (browser.isIE)
    item = getContainerWith(window.event.srcElement, "A", "menuItem");
  else
    item = event.currentTarget;
  menu = getContainerWith(item, "DIV", "menu");

  // Close any active sub menu and mark this one as active.

  if (menu.activeItem != null)
    closeSubMenu(menu);
  menu.activeItem = item;

  // Highlight the item element.

  item.className += " menuItemHighlight";

  // Initialize the sub menu, if not already done.

  if (item.subMenu == null) {
    item.subMenu = document.getElementById(menuId);
    if (item.subMenu.isInitialized == null)
      menuInit(item.subMenu);
  }

  // Get position for submenu based on the menu item.

  x = getPageOffsetLeft(item) + item.offsetWidth;
  y = getPageOffsetTop(item);

  // Adjust position to fit in view.

  var maxX, maxY;

  if (browser.isIE) {
    maxX = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) +
      (document.documentElement.clientWidth != 0 ? document.documentElement.clientWidth : document.body.clientWidth);
    maxY = Math.max(document.documentElement.scrollTop, document.body.scrollTop) +
      (document.documentElement.clientHeight != 0 ? document.documentElement.clientHeight : document.body.clientHeight);
  }
  if (browser.isOP) {
    maxX = document.documentElement.scrollLeft + window.innerWidth;
    maxY = document.documentElement.scrollTop  + window.innerHeight;
  }
  if (browser.isNS) {
    maxX = window.scrollX + window.innerWidth;
    maxY = window.scrollY + window.innerHeight;
  }
  maxX -= item.subMenu.offsetWidth;
  maxY -= item.subMenu.offsetHeight;

  if (x &gt; maxX)
    x = Math.max(0, x - item.offsetWidth - item.subMenu.offsetWidth
      + (menu.offsetWidth - item.offsetWidth));
  y = Math.max(0, Math.min(y, maxY));

  // Position and show it.

  item.subMenu.style.left       = x + "px";
  item.subMenu.style.top        = y + "px";
  item.subMenu.style.visibility = "visible";

  // For IE; size, position and show the menu's IFRAME as well.

  if (item.subMenu.iframeEl != null)
  {
    item.subMenu.iframeEl.style.left    = item.subMenu.style.left;
    item.subMenu.iframeEl.style.top     = item.subMenu.style.top;
    item.subMenu.iframeEl.style.width   = item.subMenu.offsetWidth + "px";
    item.subMenu.iframeEl.style.height  = item.subMenu.offsetHeight + "px";
    item.subMenu.iframeEl.style.display = "";
  }

  // Stop the event from bubbling.

  if (browser.isIE)
    window.event.cancelBubble = true;
  else
    event.stopPropagation();
}

function closeSubMenu(menu) {

  if (menu == null || menu.activeItem == null)
    return;

  // Recursively close any sub menus.

  if (menu.activeItem.subMenu != null) {
    closeSubMenu(menu.activeItem.subMenu);


    // Hide the sub menu.
    menu.activeItem.subMenu.style.visibility = "hidden";

    // For IE, hide the sub menu's IFRAME as well.

    if (menu.activeItem.subMenu.iframeEl != null)
      menu.activeItem.subMenu.iframeEl.style.display = "none";

    menu.activeItem.subMenu = null;
  }

  // Deactivate the active menu item.

  removeClassName(menu.activeItem, "menuItemHighlight");
  menu.activeItem = null;
}

//----------------------------------------------------------------------------
// Code to initialize menus.
//----------------------------------------------------------------------------

function menuInit(menu) {

  var itemList, spanList;
  var textEl, arrowEl;
  var itemWidth;
  var w, dw;
  var i, j;

  // For IE, replace arrow characters.

  if (browser.isIE) {
    menu.style.lineHeight = "2.5ex";
    spanList = menu.getElementsByTagName("SPAN");
    for (i = 0; i &lt; spanList.length; i++)
      if (hasClassName(spanList[i], "menuItemArrow")) {
        spanList[i].style.fontFamily = "Webdings";
        spanList[i].firstChild.nodeValue = "4";
      }
  }

  // Find the width of a menu item.

  itemList = menu.getElementsByTagName("A");
  if (itemList.length &gt; 0)
    itemWidth = itemList[0].offsetWidth;
  else
    return;

  // For items with arrows, add padding to item text to make the
  // arrows flush right.

  for (i = 0; i &lt; itemList.length; i++) {
    spanList = itemList[i].getElementsByTagName("SPAN");
    textEl  = null;
    arrowEl = null;
    for (j = 0; j &lt; spanList.length; j++) {
      if (hasClassName(spanList[j], "menuItemText"))
        textEl = spanList[j];
      if (hasClassName(spanList[j], "menuItemArrow")) {
        arrowEl = spanList[j];
      }
    }
    if (textEl != null &amp;&amp; arrowEl != null) {
      textEl.style.paddingRight = (itemWidth 
        - (textEl.offsetWidth + arrowEl.offsetWidth)) + "px";

      // For Opera, remove the negative right margin to fix a display bug.

      if (browser.isOP)
        arrowEl.style.marginRight = "0px";
    }
  }

  // Fix IE hover problem by setting an explicit width on first item of
  // the menu.

  if (browser.isIE) {
    w = itemList[0].offsetWidth;
    itemList[0].style.width = w + "px";
    dw = itemList[0].offsetWidth - w;
    w -= dw;
    itemList[0].style.width = w + "px";
  }

  // Fix the IE display problem (SELECT elements and other windowed controls
  // overlaying the menu) by adding an IFRAME under the menu.

  if (browser.isIE) {
    var iframeEl = document.createElement("IFRAME");
    iframeEl.frameBorder = 0;
    iframeEl.src = "javascript:;";
    iframeEl.style.display = "none";
    iframeEl.style.position = "absolute";
    iframeEl.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
    menu.iframeEl = menu.parentNode.insertBefore(iframeEl, menu);
  }

  // Mark menu as initialized.

  menu.isInitialized = true;
}

//----------------------------------------------------------------------------
// General utility functions.
//----------------------------------------------------------------------------

function getContainerWith(node, tagName, className) {

  // Starting with the given node, find the nearest containing element
  // with the specified tag name and style class.

  while (node != null) {
    if (node.tagName != null &amp;&amp; node.tagName == tagName &amp;&amp;
        hasClassName(node, className))
      return node;
    node = node.parentNode;
  }

  return node;
}

function hasClassName(el, name) {

  var i, list;

  // Return true if the given element currently has the given class
  // name.

  list = el.className.split(" ");
  for (i = 0; i &lt; list.length; i++)
    if (list[i] == name)
      return true;

  return false;
}

function removeClassName(el, name) {

  var i, curList, newList;

  if window.confirm(
  if (el.className == null)
    return;

  // Remove the given class name from the element's className property.

  newList = new Array();
  curList = el.className.split(" ");
  for (i = 0; i &lt; curList.length; i++)
    if (curList[i] != name)
      newList.push(curList[i]);
  el.className = newList.join(" ");
}

function getPageOffsetLeft(el) {

  var x;

  // Return the x coordinate of an element relative to the page.

  x = el.offsetLeft;
  if (el.offsetParent != null)
    x += getPageOffsetLeft(el.offsetParent);

  return x;
}

function getPageOffsetTop(el) {

  var y;

  // Return the x coordinate of an element relative to the page.

  y = el.offsetTop;
  if (el.offsetParent != null)
    y += getPageOffsetTop(el.offsetParent);

  return y;
}
</TEXTAREA> 
<DIV id=output>
<P>66|17|Strict line ending error: ')'.|if (browser.isIE) </P>
<P>67|3|Missing '{' before 'document'.| document.onmousedown = pageMousedown; </P>
<P>69|3|Missing '{' before 'document'.| document.addEventListener("mousedown", pageMousedown, true); </P>
<P>77|23|Use '===' to compare with 'null'.| if (activeButton == null) </P>
<P>77|27|Strict line ending error: ')'.| if (activeButton == null) </P>
<P>78|5|Missing '{' before 'return'.| return; </P>
<P>82|19|Strict line ending error: ')'.| if (browser.isIE) </P>
<P>83|5|Missing '{' before 'el'.| el = window.event.srcElement; </P>
<P>85|5|Missing '{' before 'el'.| el = (event.target.tagName ? event.target : event.target.parentNode); </P>
<P>89|25|Strict line ending error: ')'.| if (el == activeButton) </P>
<P>90|5|Missing '{' before 'return'.| return; </P>
<P>95|46|Use '===' to compare with 'null'.| if (getContainerWith(el, "DIV", "menu") == null) { </P>
<P>107|19|Strict line ending error: ')'.| if (browser.isIE) </P>
<P>108|5|Missing '{' before 'button'.| button = window.event.srcElement; </P>
<P>110|5|Missing '{' before 'button'.| button = event.currentTarget; </P>
<P>119|22|Use '===' to compare with 'null'.| if (button.menu == null) { </P>
<P>121|38|Use '===' to compare with 'null'.| if (button.menu.isInitialized == null) </P>
<P>121|42|Strict line ending error: ')'.| if (button.menu.isInitialized == null) </P>
<P>122|7|Missing '{' before 'menuInit'.| menuInit(button.menu); </P>
<P>127|23|Use '!==' to compare with 'null'.| if (activeButton != null) </P>
<P>127|27|Strict line ending error: ')'.| if (activeButton != null) </P>
<P>128|5|Missing '{' before 'resetButton'.| resetButton(activeButton); </P>
<P>137|5|Missing '{' before 'activeButton'.| activeButton = null; </P>
<P>148|19|Strict line ending error: ')'.| if (browser.isIE) </P>
<P>149|5|Missing '{' before 'button'.| button = window.event.srcElement; </P>
<P>151|5|Missing '{' before 'button'.| button = event.currentTarget; </P>
<P>155|23|Use '!==' to compare with 'null'.| if (activeButton != null &amp;&amp; activeButton != button) </P>
<P>155|53|Strict line ending error: ')'.| if (activeButton != null &amp;&amp; activeButton != button) </P>
<P>156|5|Missing '{' before 'buttonClick'.| buttonClick(event, menuId); </P>
<P>187|31|Use '!==' to compare with 'null'.| if (button.menu.iframeEl != null) </P>
<P>205|22|Use '!==' to compare with 'null'.| if (button.menu != null) { </P>
<P>211|33|Use '!==' to compare with 'null'.| if (button.menu.iframeEl != null) </P>
<P>211|37|Strict line ending error: ')'.| if (button.menu.iframeEl != null) </P>
<P>212|7|Missing '{' before 'button'.| button.menu.iframeEl.style.display = "none"; </P>
<P>226|19|Strict line ending error: ')'.| if (browser.isIE) </P>
<P>227|5|Missing '{' before 'menu'.| menu = getContainerWith(window.event.srcElement, "DIV", "menu"); </P>
<P>229|5|Missing '{' before 'menu'.| menu = event.currentTarget; </P>
<P>233|26|Use '!==' to compare with 'null'.| if (menu.activeItem != null) </P>
<P>233|30|Strict line ending error: ')'.| if (menu.activeItem != null) </P>
<P>234|5|Missing '{' before 'closeSubMenu'.| closeSubMenu(menu); </P>
<P>243|19|Strict line ending error: ')'.| if (browser.isIE) </P>
<P>244|5|Missing '{' before 'item'.| item = getContainerWith(window.event.srcElement, "A", "menuItem"); </P>
<P>246|5|Missing '{' before 'item'.| item = event.currentTarget; </P>
<P>251|26|Use '!==' to compare with 'null'.| if (menu.activeItem != null) </P>
<P>251|30|Strict line ending error: ')'.| if (menu.activeItem != null) </P>
<P>252|5|Missing '{' before 'closeSubMenu'.| closeSubMenu(menu); </P>
<P>261|23|Use '===' to compare with 'null'.| if (item.subMenu == null) { </P>
<P>263|39|Use '===' to compare with 'null'.| if (item.subMenu.isInitialized == null) </P>
<P>263|43|Strict line ending error: ')'.| if (item.subMenu.isInitialized == null) </P>
<P>264|7|Missing '{' before 'menuInit'.| menuInit(item.subMenu); </P>
<P>278|48|Use '!==' to compare with '0'.| (document.documentElement.clientWidth != 0 ? document.documentElement.clientWidth : document.body.clientWidth); </P>
<P>280|49|Use '!==' to compare with '0'.| (document.documentElement.clientHeight != 0 ? document.documentElement.clientHeight : document.body.clientHeight); </P>
<P>293|15|Strict line ending error: ')'.| if (x &gt; maxX) </P>
<P>294|5|Missing '{' before 'x'.| x = Math.max(0, x - item.offsetWidth - item.subMenu.offsetWidth </P>
<P>294|57|Strict line ending error: 'offsetWidth'.| x = Math.max(0, x - item.offsetWidth - item.subMenu.offsetWidth </P>
<P>306|32|Use '!==' to compare with 'null'.| if (item.subMenu.iframeEl != null) </P>
<P>317|19|Strict line ending error: ')'.| if (browser.isIE) </P>
<P>318|5|Missing '{' before 'window'.| window.event.cancelBubble = true; </P>
<P>320|5|Missing '{' before 'event'.| event.stopPropagation(); </P>
<P>325|15|Use '===' to compare with 'null'.| if (menu == null || menu.activeItem == null) </P>
<P>325|42|Use '===' to compare with 'null'.| if (menu == null || menu.activeItem == null) </P>
<P>325|46|Strict line ending error: ')'.| if (menu == null || menu.activeItem == null) </P>
<P>326|5|Missing '{' before 'return'.| return; </P>
<P>330|34|Use '!==' to compare with 'null'.| if (menu.activeItem.subMenu != null) { </P>
<P>339|45|Use '!==' to compare with 'null'.| if (menu.activeItem.subMenu.iframeEl != null) </P>
<P>339|49|Strict line ending error: ')'.| if (menu.activeItem.subMenu.iframeEl != null) </P>
<P>340|7|Missing '{' before 'menu'.| menu.activeItem.subMenu.iframeEl.style.display = "none"; </P>
<P>368|41|Strict line ending error: ')'.| for (i = 0; i &lt; spanList.length; i++) </P>
<P>369|7|Missing '{' before 'if'.| if (hasClassName(spanList[i], "menuItemArrow")) { </P>
<P>378|26|Strict line ending error: ')'.| if (itemList.length &gt; 0) </P>
<P>379|5|Missing '{' before 'itemWidth'.| itemWidth = itemList[0].offsetWidth; </P>
<P>381|5|Missing '{' before 'return'.| return; </P>
<P>391|52|Strict line ending error: ')'.| if (hasClassName(spanList[j], "menuItemText")) </P>
<P>392|9|Missing '{' before 'textEl'.| textEl = spanList[j]; </P>
<P>397|19|Use '!==' to compare with 'null'.| if (textEl != null &amp;&amp; arrowEl != null) { </P>
<P>397|38|Use '!==' to compare with 'null'.| if (textEl != null &amp;&amp; arrowEl != null) { </P>
<P>398|36|Strict line ending error: 'itemWidth'.| textEl.style.paddingRight = (itemWidth </P>
<P>403|23|Strict line ending error: ')'.| if (browser.isOP) </P>
<P>404|9|Missing '{' before 'arrowEl'.| arrowEl.style.marginRight = "0px"; </P>
<P>446|18|Use '!==' to compare with 'null'.| while (node != null) { </P>
<P>447|25|Use '!==' to compare with 'null'.| if (node.tagName != null &amp;&amp; node.tagName == tagName &amp;&amp; </P>
<P>448|38|Strict line ending error: ')'.| hasClassName(node, className)) </P>
<P>449|7|Missing '{' before 'return'.| return node; </P>
<P>464|35|Strict line ending error: ')'.| for (i = 0; i &lt; list.length; i++) </P>
<P>465|5|Missing '{' before 'if'.| if (list[i] == name) </P>
<P>465|24|Strict line ending error: ')'.| if (list[i] == name) </P>
<P>466|7|Missing '{' before 'return'.| return true; </P>
<P>475|6|Expected '(' and instead saw 'window'.| if window.confirm( </P>
<P>475|12|Expected an identifier and instead saw '.'.| if window.confirm( </P></DIV></FORM>
<SCRIPT src="check.js"></SCRIPT>
</SCRIPT>
